
TWI_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00001014  000010a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001014  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800116  00800116  000010be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000111c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001203  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009cd  00000000  00000000  00002437  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000090f  00000000  00000000  00002e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00003714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d7  00000000  00000000  000038e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000755  00000000  00000000  00003ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e1       	ldi	r30, 0x14	; 20
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 31       	cpi	r26, 0x16	; 22
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a6 e1       	ldi	r26, 0x16	; 22
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 34       	cpi	r26, 0x42	; 66
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 01 02 	call	0x402	; 0x402 <main>
      9e:	0c 94 08 08 	jmp	0x1010	; 0x1010 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Master_Init>:
#include "I2C.h"

//******************************************************************************************************************
//FUNCION PARA INICIALIZAR I2C Maestro
//******************************************************************************************************************
void I2C_Master_Init(unsigned long SCL_CLOCK, uint8_t Prescaler){
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	cf 93       	push	r28
      ac:	8b 01       	movw	r16, r22
      ae:	9c 01       	movw	r18, r24
      b0:	c4 2f       	mov	r28, r20
	DDRC &= ~((1<<DDC4)|(1<<DDC5));	//Se configuran los pines de I2C como entradas
      b2:	87 b1       	in	r24, 0x07	; 7
      b4:	8f 7c       	andi	r24, 0xCF	; 207
      b6:	87 b9       	out	0x07, r24	; 7

	switch(Prescaler){
      b8:	44 30       	cpi	r20, 0x04	; 4
      ba:	79 f0       	breq	.+30     	; 0xda <I2C_Master_Init+0x34>
      bc:	18 f4       	brcc	.+6      	; 0xc4 <I2C_Master_Init+0x1e>
      be:	41 30       	cpi	r20, 0x01	; 1
      c0:	31 f0       	breq	.+12     	; 0xce <I2C_Master_Init+0x28>
      c2:	23 c0       	rjmp	.+70     	; 0x10a <I2C_Master_Init+0x64>
      c4:	40 31       	cpi	r20, 0x10	; 16
      c6:	91 f0       	breq	.+36     	; 0xec <I2C_Master_Init+0x46>
      c8:	40 34       	cpi	r20, 0x40	; 64
      ca:	c9 f0       	breq	.+50     	; 0xfe <I2C_Master_Init+0x58>
      cc:	1e c0       	rjmp	.+60     	; 0x10a <I2C_Master_Init+0x64>
		case 1:
		TWSR &= ~((1<<TWPS1)|(1<<TWPS0));
      ce:	e9 eb       	ldi	r30, 0xB9	; 185
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	8c 7f       	andi	r24, 0xFC	; 252
      d6:	80 83       	st	Z, r24
		break;
      d8:	1e c0       	rjmp	.+60     	; 0x116 <I2C_Master_Init+0x70>
		
		case 4:
			TWSR &= ~(1<<TWPS1);
      da:	e9 eb       	ldi	r30, 0xB9	; 185
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	8d 7f       	andi	r24, 0xFD	; 253
      e2:	80 83       	st	Z, r24
			TWSR |= (1<<TWPS0);
      e4:	80 81       	ld	r24, Z
      e6:	81 60       	ori	r24, 0x01	; 1
      e8:	80 83       	st	Z, r24
		break;
      ea:	15 c0       	rjmp	.+42     	; 0x116 <I2C_Master_Init+0x70>
		
		case 16:
			TWSR &= ~(1<<TWPS0);
      ec:	e9 eb       	ldi	r30, 0xB9	; 185
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	80 81       	ld	r24, Z
      f2:	8e 7f       	andi	r24, 0xFE	; 254
      f4:	80 83       	st	Z, r24
			TWSR |= (1<<TWPS1);
      f6:	80 81       	ld	r24, Z
      f8:	82 60       	ori	r24, 0x02	; 2
      fa:	80 83       	st	Z, r24
		break;
      fc:	0c c0       	rjmp	.+24     	; 0x116 <I2C_Master_Init+0x70>
		
		case 64:
			TWSR |= ((1<<TWPS1)|(1<<TWPS0));
      fe:	e9 eb       	ldi	r30, 0xB9	; 185
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 81       	ld	r24, Z
     104:	83 60       	ori	r24, 0x03	; 3
     106:	80 83       	st	Z, r24
		break;
     108:	06 c0       	rjmp	.+12     	; 0x116 <I2C_Master_Init+0x70>
		
		default:
			TWSR &= ~((1<<TWPS1)|(1<<TWPS0));
     10a:	e9 eb       	ldi	r30, 0xB9	; 185
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	8c 7f       	andi	r24, 0xFC	; 252
     112:	80 83       	st	Z, r24
			Prescaler = 1;
     114:	c1 e0       	ldi	r28, 0x01	; 1
		break;
		
	}
	
	TWBR = ((F_CPU/SCL_CLOCK)-16)/(2*Prescaler);		//MUST ...
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	74 e2       	ldi	r23, 0x24	; 36
     11a:	84 ef       	ldi	r24, 0xF4	; 244
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	a9 01       	movw	r20, r18
     120:	98 01       	movw	r18, r16
     122:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__udivmodsi4>
     126:	ca 01       	movw	r24, r20
     128:	b9 01       	movw	r22, r18
     12a:	60 51       	subi	r22, 0x10	; 16
     12c:	71 09       	sbc	r23, r1
     12e:	81 09       	sbc	r24, r1
     130:	91 09       	sbc	r25, r1
     132:	4c 2f       	mov	r20, r28
     134:	50 e0       	ldi	r21, 0x00	; 0
     136:	9a 01       	movw	r18, r20
     138:	22 0f       	add	r18, r18
     13a:	33 1f       	adc	r19, r19
     13c:	03 2e       	mov	r0, r19
     13e:	00 0c       	add	r0, r0
     140:	44 0b       	sbc	r20, r20
     142:	55 0b       	sbc	r21, r21
     144:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__udivmodsi4>
     148:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1<<TWEN);
     14c:	ec eb       	ldi	r30, 0xBC	; 188
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	84 60       	ori	r24, 0x04	; 4
     154:	80 83       	st	Z, r24

}
     156:	cf 91       	pop	r28
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	08 95       	ret

0000015e <I2C_Master_Start>:
//FUNCION PARA EL INICIO DE LA COMUNICACIÓN I2C
//******************************************************************************************************************

void I2C_Master_Start(void){
	uint8_t estado;
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);		//Se configura la condición de Start
     15e:	84 ea       	ldi	r24, 0xA4	; 164
     160:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));		//Espera a que termine la bandera TWINT
     164:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     168:	88 23       	and	r24, r24
     16a:	e4 f7       	brge	.-8      	; 0x164 <I2C_Master_Start+0x6>
}
     16c:	08 95       	ret

0000016e <I2C_Master_Stop>:
//******************************************************************************************************************
//FUNCION PARA LA PARADA DE LA COMUNICACIÓN I2C
//******************************************************************************************************************

void I2C_Master_Stop(void){
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWSTO);		//Inicia la secuancia de parada del STOP
     16e:	84 e9       	ldi	r24, 0x94	; 148
     170:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     174:	08 95       	ret

00000176 <I2C_Master_Write>:
//*****************************************************************************************************************

uint8_t I2C_Master_Write(uint8_t dato){
	uint8_t estado;

	TWDR = dato; // Cargar el dato
     176:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=(1 << TWEN)|(1 << TWINT); // Inicia el envio
     17a:	84 e8       	ldi	r24, 0x84	; 132
     17c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	while(!(TWCR & (1 << TWINT))); // Espera al flag TWINT
     180:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     184:	88 23       	and	r24, r24
     186:	e4 f7       	brge	.-8      	; 0x180 <I2C_Master_Write+0xa>
	estado = TWSR & 0xF8;		// Verificar estado
     188:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     18c:	88 7f       	andi	r24, 0xF8	; 248
	
	// Verificar si se transmitio una SLA + W con ACK, SLA + R con ACK, o un Dato con ACK
	if(estado == 0x18 || estado == 0x28 || estado == 0x40){
     18e:	88 31       	cpi	r24, 0x18	; 24
     190:	31 f0       	breq	.+12     	; 0x19e <I2C_Master_Write+0x28>
     192:	88 32       	cpi	r24, 0x28	; 40
     194:	31 f0       	breq	.+12     	; 0x1a2 <I2C_Master_Write+0x2c>
     196:	80 34       	cpi	r24, 0x40	; 64
     198:	29 f4       	brne	.+10     	; 0x1a4 <I2C_Master_Write+0x2e>
		return 1;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	08 95       	ret
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	08 95       	ret
     1a2:	81 e0       	ldi	r24, 0x01	; 1
		}else{
		return estado;

	}
}
     1a4:	08 95       	ret

000001a6 <LCD_Port>:
}

// Función para escribir en los pines de datos de la LCD
void LCD_Port(char a) {
	// Bits menos significativos en PORTD (D0-D5)
	PORTD = (PORTD & 0x03) | ((a & 0x3F) << 2);
     1a6:	9b b1       	in	r25, 0x0b	; 11
     1a8:	28 2f       	mov	r18, r24
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	22 0f       	add	r18, r18
     1ae:	33 1f       	adc	r19, r19
     1b0:	22 0f       	add	r18, r18
     1b2:	33 1f       	adc	r19, r19
     1b4:	93 70       	andi	r25, 0x03	; 3
     1b6:	29 2b       	or	r18, r25
     1b8:	2b b9       	out	0x0b, r18	; 11
	// Bits más significativos en PORTB (D6-D7)
	PORTB = (PORTB & 0xFC) | ((a >> 6) & 0x03);
     1ba:	95 b1       	in	r25, 0x05	; 5
     1bc:	9c 7f       	andi	r25, 0xFC	; 252
     1be:	82 95       	swap	r24
     1c0:	86 95       	lsr	r24
     1c2:	86 95       	lsr	r24
     1c4:	83 70       	andi	r24, 0x03	; 3
     1c6:	89 2b       	or	r24, r25
     1c8:	85 b9       	out	0x05, r24	; 5
     1ca:	08 95       	ret

000001cc <LCD_CMD>:
	_delay_ms(2);
}

// Función para enviar un comando a la LCD
void LCD_CMD(char a) {
	PORTB &= ~(1 << PORTB2); // RS = 0 (modo comando)
     1cc:	95 b1       	in	r25, 0x05	; 5
     1ce:	9b 7f       	andi	r25, 0xFB	; 251
     1d0:	95 b9       	out	0x05, r25	; 5
	LCD_Port(a);
     1d2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_Port>
	PORTB |= (1 << PORTB3);  // E = 1
     1d6:	85 b1       	in	r24, 0x05	; 5
     1d8:	88 60       	ori	r24, 0x08	; 8
     1da:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1dc:	8f e9       	ldi	r24, 0x9F	; 159
     1de:	9f e0       	ldi	r25, 0x0F	; 15
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_CMD+0x14>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <LCD_CMD+0x1a>
     1e6:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1 << PORTB3); // E = 0
     1e8:	85 b1       	in	r24, 0x05	; 5
     1ea:	87 7f       	andi	r24, 0xF7	; 247
     1ec:	85 b9       	out	0x05, r24	; 5
     1ee:	08 95       	ret

000001f0 <initLCD8bits>:
#include <util/delay.h>

// Función para inicializar la LCD en modo 8 bits
void initLCD8bits(void){
	// Configurar los pines como salida
	DDRB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2) | (1 << DDB3); // D6, D7, RS, E
     1f0:	84 b1       	in	r24, 0x04	; 4
     1f2:	8f 60       	ori	r24, 0x0F	; 15
     1f4:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DDD2) | (1 << DDD3) | (1 << DDD4) | (1 << DDD5) | (1 << DDD6) | (1 << DDD7); // D0-D5
     1f6:	8a b1       	in	r24, 0x0a	; 10
     1f8:	8c 6f       	ori	r24, 0xFC	; 252
     1fa:	8a b9       	out	0x0a, r24	; 10

	// Asegurar que los puertos inicien en 0
	PORTB = 0;
     1fc:	15 b8       	out	0x05, r1	; 5
	PORTD = 0;
     1fe:	1b b8       	out	0x0b, r1	; 11
     200:	2f ef       	ldi	r18, 0xFF	; 255
     202:	89 ef       	ldi	r24, 0xF9	; 249
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	21 50       	subi	r18, 0x01	; 1
     208:	80 40       	sbci	r24, 0x00	; 0
     20a:	90 40       	sbci	r25, 0x00	; 0
     20c:	e1 f7       	brne	.-8      	; 0x206 <initLCD8bits+0x16>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <initLCD8bits+0x20>
     210:	00 00       	nop

	// Secuencia de inicialización de la LCD
	_delay_ms(20);
	LCD_CMD(0x30);
     212:	80 e3       	ldi	r24, 0x30	; 48
     214:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_CMD>
     218:	8f e1       	ldi	r24, 0x1F	; 31
     21a:	9e e4       	ldi	r25, 0x4E	; 78
     21c:	01 97       	sbiw	r24, 0x01	; 1
     21e:	f1 f7       	brne	.-4      	; 0x21c <initLCD8bits+0x2c>
     220:	00 c0       	rjmp	.+0      	; 0x222 <initLCD8bits+0x32>
     222:	00 00       	nop
	_delay_ms(5);
	LCD_CMD(0x30);
     224:	80 e3       	ldi	r24, 0x30	; 48
     226:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_CMD>
     22a:	8f e9       	ldi	r24, 0x9F	; 159
     22c:	9f e0       	ldi	r25, 0x0F	; 15
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <initLCD8bits+0x3e>
     232:	00 c0       	rjmp	.+0      	; 0x234 <initLCD8bits+0x44>
     234:	00 00       	nop
	_delay_ms(1);
	LCD_CMD(0x30);
     236:	80 e3       	ldi	r24, 0x30	; 48
     238:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_CMD>
     23c:	8f e9       	ldi	r24, 0x9F	; 159
     23e:	9f e0       	ldi	r25, 0x0F	; 15
     240:	01 97       	sbiw	r24, 0x01	; 1
     242:	f1 f7       	brne	.-4      	; 0x240 <initLCD8bits+0x50>
     244:	00 c0       	rjmp	.+0      	; 0x246 <initLCD8bits+0x56>
     246:	00 00       	nop
	_delay_ms(1);
	LCD_CMD(0x38); // Modo 8 bits, 2 líneas, 5x8 puntos
     248:	88 e3       	ldi	r24, 0x38	; 56
     24a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_CMD>

	LCD_CMD(0x0C); // Encender display sin cursor
     24e:	8c e0       	ldi	r24, 0x0C	; 12
     250:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_CMD>
	LCD_CMD(0x06); // Modo de entrada: incrementar dirección, sin desplazamiento
     254:	86 e0       	ldi	r24, 0x06	; 6
     256:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_CMD>
	LCD_CMD(0x01); // Limpiar pantalla
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_CMD>
     260:	8f e3       	ldi	r24, 0x3F	; 63
     262:	9f e1       	ldi	r25, 0x1F	; 31
     264:	01 97       	sbiw	r24, 0x01	; 1
     266:	f1 f7       	brne	.-4      	; 0x264 <initLCD8bits+0x74>
     268:	00 c0       	rjmp	.+0      	; 0x26a <initLCD8bits+0x7a>
     26a:	00 00       	nop
     26c:	08 95       	ret

0000026e <LCD_Write_Char>:
	PORTB = (PORTB & 0xFC) | ((a >> 6) & 0x03);
}

// Función para escribir un carácter en la LCD
void LCD_Write_Char(char c){
	PORTB |= (1 << PORTB2); // RS = 1 (modo datos)
     26e:	95 b1       	in	r25, 0x05	; 5
     270:	94 60       	ori	r25, 0x04	; 4
     272:	95 b9       	out	0x05, r25	; 5
	LCD_Port(c);
     274:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_Port>
	PORTB |= (1 << PORTB3); // E = 1
     278:	85 b1       	in	r24, 0x05	; 5
     27a:	88 60       	ori	r24, 0x08	; 8
     27c:	85 b9       	out	0x05, r24	; 5
     27e:	8f e9       	ldi	r24, 0x9F	; 159
     280:	9f e0       	ldi	r25, 0x0F	; 15
     282:	01 97       	sbiw	r24, 0x01	; 1
     284:	f1 f7       	brne	.-4      	; 0x282 <LCD_Write_Char+0x14>
     286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_Write_Char+0x1a>
     288:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1 << PORTB3); // E = 0
     28a:	85 b1       	in	r24, 0x05	; 5
     28c:	87 7f       	andi	r24, 0xF7	; 247
     28e:	85 b9       	out	0x05, r24	; 5
     290:	08 95       	ret

00000292 <LCD_Write_String>:
}

// Función para escribir una cadena de caracteres en la LCD
void LCD_Write_String(char *a) {
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	ec 01       	movw	r28, r24
	while (*a) {
     298:	03 c0       	rjmp	.+6      	; 0x2a0 <LCD_Write_String+0xe>
		LCD_Write_Char(*a);
     29a:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_Write_Char>
		a++;
     29e:	21 96       	adiw	r28, 0x01	; 1
	PORTB &= ~(1 << PORTB3); // E = 0
}

// Función para escribir una cadena de caracteres en la LCD
void LCD_Write_String(char *a) {
	while (*a) {
     2a0:	88 81       	ld	r24, Y
     2a2:	81 11       	cpse	r24, r1
     2a4:	fa cf       	rjmp	.-12     	; 0x29a <LCD_Write_String+0x8>
		LCD_Write_Char(*a);
		a++;
	}
}
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <LCD_Set_Cursor>:

// Función para posicionar el cursor en la LCD
void LCD_Set_Cursor(char c, char f) {
	char temp = (f == 1) ? (0x80 + c - 1) : (0xC0 + c - 1);
     2ac:	61 30       	cpi	r22, 0x01	; 1
     2ae:	11 f4       	brne	.+4      	; 0x2b4 <LCD_Set_Cursor+0x8>
     2b0:	81 58       	subi	r24, 0x81	; 129
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <LCD_Set_Cursor+0xa>
     2b4:	81 54       	subi	r24, 0x41	; 65
	LCD_CMD(temp);
     2b6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_CMD>
     2ba:	08 95       	ret

000002bc <setup_leds>:
//******************************************************************************************************************
//FUNCIONES
//******************************************************************************************************************
void setup_leds(void){
	//Configuración de la Led Esclavo 1 - ADC
	DDRB |=(1 << DDB5);			//Se convigura el PB5 como salida
     2bc:	84 b1       	in	r24, 0x04	; 4
     2be:	80 62       	ori	r24, 0x20	; 32
     2c0:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PORTB5);	//Se apaga PB5
     2c2:	85 b1       	in	r24, 0x05	; 5
     2c4:	8f 7d       	andi	r24, 0xDF	; 223
     2c6:	85 b9       	out	0x05, r24	; 5
	
	//Configuración de la Led Esclavo 2 - Contador
	DDRC |=(1 << DDC0);			//Se convigura el PC0 como salida
     2c8:	87 b1       	in	r24, 0x07	; 7
     2ca:	81 60       	ori	r24, 0x01	; 1
     2cc:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << PORTC0);	//Se apaga PC0
     2ce:	88 b1       	in	r24, 0x08	; 8
     2d0:	8e 7f       	andi	r24, 0xFE	; 254
     2d2:	88 b9       	out	0x08, r24	; 8
     2d4:	08 95       	ret

000002d6 <float_to_string>:
}

void float_to_string(float num, char *buffer, int precision){
     2d6:	4f 92       	push	r4
     2d8:	5f 92       	push	r5
     2da:	6f 92       	push	r6
     2dc:	7f 92       	push	r7
     2de:	8f 92       	push	r8
     2e0:	9f 92       	push	r9
     2e2:	af 92       	push	r10
     2e4:	bf 92       	push	r11
     2e6:	cf 92       	push	r12
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	a0 97       	sbiw	r28, 0x20	; 32
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
     306:	6b 01       	movw	r12, r22
     308:	7c 01       	movw	r14, r24
     30a:	94 2e       	mov	r9, r20
     30c:	85 2e       	mov	r8, r21
     30e:	59 01       	movw	r10, r18
	// Parte entera
	int integer_part = (int)num;
     310:	0e 94 bd 03 	call	0x77a	; 0x77a <__fixsfsi>
     314:	2b 01       	movw	r4, r22
     316:	3c 01       	movw	r6, r24
	
	// Parte decimal
	float decimal_part = num - integer_part;
     318:	07 2e       	mov	r0, r23
     31a:	00 0c       	add	r0, r0
     31c:	88 0b       	sbc	r24, r24
     31e:	99 0b       	sbc	r25, r25
     320:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
     324:	9b 01       	movw	r18, r22
     326:	ac 01       	movw	r20, r24
     328:	c7 01       	movw	r24, r14
     32a:	b6 01       	movw	r22, r12
     32c:	0e 94 de 02 	call	0x5bc	; 0x5bc <__subsf3>
     330:	6b 01       	movw	r12, r22
     332:	7c 01       	movw	r14, r24
	
	// Convertir la parte entera a cadena
	char int_buffer[16]; // Buffer para la parte entera
	snprintf(int_buffer, sizeof(int_buffer), "%d", integer_part);
     334:	5f 92       	push	r5
     336:	4f 92       	push	r4
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	9f 93       	push	r25
     33e:	8f 93       	push	r24
     340:	1f 92       	push	r1
     342:	80 e1       	ldi	r24, 0x10	; 16
     344:	8f 93       	push	r24
     346:	ce 01       	movw	r24, r28
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	9f 93       	push	r25
     34c:	8f 93       	push	r24
     34e:	0e 94 10 05 	call	0xa20	; 0xa20 <snprintf>
	
	// Convertir la parte decimal a cadena
	char dec_buffer[16]; // Buffer para la parte decimal
	for (int i = 0; i < precision; i++) {
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	00 e0       	ldi	r16, 0x00	; 0
     35e:	10 e0       	ldi	r17, 0x00	; 0
     360:	0c c0       	rjmp	.+24     	; 0x37a <float_to_string+0xa4>
		decimal_part *= 10;
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	40 e2       	ldi	r20, 0x20	; 32
     368:	51 e4       	ldi	r21, 0x41	; 65
     36a:	c7 01       	movw	r24, r14
     36c:	b6 01       	movw	r22, r12
     36e:	0e 94 81 04 	call	0x902	; 0x902 <__mulsf3>
     372:	6b 01       	movw	r12, r22
     374:	7c 01       	movw	r14, r24
	char int_buffer[16]; // Buffer para la parte entera
	snprintf(int_buffer, sizeof(int_buffer), "%d", integer_part);
	
	// Convertir la parte decimal a cadena
	char dec_buffer[16]; // Buffer para la parte decimal
	for (int i = 0; i < precision; i++) {
     376:	0f 5f       	subi	r16, 0xFF	; 255
     378:	1f 4f       	sbci	r17, 0xFF	; 255
     37a:	0a 15       	cp	r16, r10
     37c:	1b 05       	cpc	r17, r11
     37e:	8c f3       	brlt	.-30     	; 0x362 <float_to_string+0x8c>
		decimal_part *= 10;
	}
	
	snprintf(dec_buffer, sizeof(dec_buffer), "%d", (int)decimal_part);
     380:	c7 01       	movw	r24, r14
     382:	b6 01       	movw	r22, r12
     384:	0e 94 bd 03 	call	0x77a	; 0x77a <__fixsfsi>
     388:	7f 93       	push	r23
     38a:	6f 93       	push	r22
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	9f 93       	push	r25
     392:	8f 93       	push	r24
     394:	1f 92       	push	r1
     396:	80 e1       	ldi	r24, 0x10	; 16
     398:	8f 93       	push	r24
     39a:	8e 01       	movw	r16, r28
     39c:	0f 5e       	subi	r16, 0xEF	; 239
     39e:	1f 4f       	sbci	r17, 0xFF	; 255
     3a0:	1f 93       	push	r17
     3a2:	0f 93       	push	r16
     3a4:	0e 94 10 05 	call	0xa20	; 0xa20 <snprintf>
	
	// Combinar ambas partes en el buffer final
	snprintf(buffer, 32, "%s.%s", int_buffer, dec_buffer);
     3a8:	1f 93       	push	r17
     3aa:	0f 93       	push	r16
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	9f 93       	push	r25
     3b2:	8f 93       	push	r24
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	9f 93       	push	r25
     3ba:	8f 93       	push	r24
     3bc:	1f 92       	push	r1
     3be:	80 e2       	ldi	r24, 0x20	; 32
     3c0:	8f 93       	push	r24
     3c2:	8f 92       	push	r8
     3c4:	9f 92       	push	r9
     3c6:	0e 94 10 05 	call	0xa20	; 0xa20 <snprintf>
}
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	cd bf       	out	0x3d, r28	; 61
     3d4:	a0 96       	adiw	r28, 0x20	; 32
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	ff 90       	pop	r15
     3ea:	ef 90       	pop	r14
     3ec:	df 90       	pop	r13
     3ee:	cf 90       	pop	r12
     3f0:	bf 90       	pop	r11
     3f2:	af 90       	pop	r10
     3f4:	9f 90       	pop	r9
     3f6:	8f 90       	pop	r8
     3f8:	7f 90       	pop	r7
     3fa:	6f 90       	pop	r6
     3fc:	5f 90       	pop	r5
     3fe:	4f 90       	pop	r4
     400:	08 95       	ret

00000402 <main>:
//LOOP
//******************************************************************************************************************

int main(void)
{
	I2C_Master_Init(1000,1); //Se inicializa como maestro Fscl 100Hz, prescaler 1
     402:	41 e0       	ldi	r20, 0x01	; 1
     404:	68 ee       	ldi	r22, 0xE8	; 232
     406:	73 e0       	ldi	r23, 0x03	; 3
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Master_Init>
	setup_leds();		//Se llama a la función de leds "Conexión"
     410:	0e 94 5e 01 	call	0x2bc	; 0x2bc <setup_leds>
	
	initLCD8bits();		//Se inicializa la LCD 16X2
     414:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <initLCD8bits>
	
	//Se configuran textos iniciales en la LCD
	LCD_Set_Cursor(4, 1);
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	84 e0       	ldi	r24, 0x04	; 4
     41c:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_Set_Cursor>
	LCD_Write_String("S1:  ");
     420:	89 e0       	ldi	r24, 0x09	; 9
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 49 01 	call	0x292	; 0x292 <LCD_Write_String>
	LCD_Write_String("  S2: ");
     428:	8f e0       	ldi	r24, 0x0F	; 15
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 49 01 	call	0x292	; 0x292 <LCD_Write_String>
    while (1) 
    {
		
		//----> Lectura del Potenciometro 
		PORTB|=(1 << PORTB5);		//Se enciende la LED del ADC
     430:	85 b1       	in	r24, 0x05	; 5
     432:	80 62       	ori	r24, 0x20	; 32
     434:	85 b9       	out	0x05, r24	; 5
		
		I2C_Master_Start();
     436:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Master_Start>
		// Escritura
		bufferI2C = slave1 << 1 & 0b11111110;	//Se configura la comunicación con el Esclavo del ADC
     43a:	80 e6       	ldi	r24, 0x60	; 96
     43c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <bufferI2C>

		temp = I2C_Master_Write(bufferI2C);
     440:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
     444:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <temp>
		if(temp != 1){				//En el dado caso de no entablar conexión, se detiene la comunicación
     448:	81 30       	cpi	r24, 0x01	; 1
     44a:	19 f0       	breq	.+6      	; 0x452 <main+0x50>

			I2C_Master_Stop();
     44c:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
     450:	5b c0       	rjmp	.+182    	; 0x508 <main+0x106>

		}else{		//Si se entabla conexión, se puede seguir la comunicación
			
			I2C_Master_Write('R');
     452:	82 e5       	ldi	r24, 0x52	; 82
     454:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
			I2C_Master_Stop();
     458:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
     45c:	2f ef       	ldi	r18, 0xFF	; 255
     45e:	89 e6       	ldi	r24, 0x69	; 105
     460:	98 e1       	ldi	r25, 0x18	; 24
     462:	21 50       	subi	r18, 0x01	; 1
     464:	80 40       	sbci	r24, 0x00	; 0
     466:	90 40       	sbci	r25, 0x00	; 0
     468:	e1 f7       	brne	.-8      	; 0x462 <main+0x60>
     46a:	00 c0       	rjmp	.+0      	; 0x46c <main+0x6a>
     46c:	00 00       	nop
			
			_delay_ms(500);
			
			//Se apaga la led del ADC para indicar comunicación (Parpadeara cada vez que entre al ciclo "else")
			PORTB &= ~(1 << PORTB5);		
     46e:	85 b1       	in	r24, 0x05	; 5
     470:	8f 7d       	andi	r24, 0xDF	; 223
     472:	85 b9       	out	0x05, r24	; 5
			I2C_Master_Start();
     474:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Master_Start>
			// Lectura
			bufferI2C = slave1 << 1 | 0b00000001;
     478:	81 e6       	ldi	r24, 0x61	; 97
     47a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <bufferI2C>
			
			temp = I2C_Master_Write(bufferI2C);
     47e:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
     482:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <temp>
			if(temp != 1){		
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	11 f0       	breq	.+4      	; 0x48e <main+0x8c>
				I2C_Master_Stop();
     48a:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
			}

			TWCR=(1 << TWINT)|(1 << TWEN);
     48e:	84 e8       	ldi	r24, 0x84	; 132
     490:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			while (!(TWCR & (1 << TWINT)));
     494:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     498:	88 23       	and	r24, r24
     49a:	e4 f7       	brge	.-8      	; 0x494 <main+0x92>

			valorI2C= TWDR;							//Se almacena el valor de la ADC enviado por el esclavo	
     49c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     4a0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <valorI2C>

			I2C_Master_Stop();
     4a4:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
			
			voltaje_pot = (valorI2C*5.0)/255.0;		//Se convierte el valor de 255 del ADC a 5V
     4a8:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <valorI2C>
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 ea       	ldi	r20, 0xA0	; 160
     4bc:	50 e4       	ldi	r21, 0x40	; 64
     4be:	0e 94 81 04 	call	0x902	; 0x902 <__mulsf3>
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	4f e7       	ldi	r20, 0x7F	; 127
     4c8:	53 e4       	ldi	r21, 0x43	; 67
     4ca:	0e 94 4b 03 	call	0x696	; 0x696 <__divsf3>
     4ce:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <voltaje_pot>
     4d2:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <voltaje_pot+0x1>
     4d6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <voltaje_pot+0x2>
     4da:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <voltaje_pot+0x3>
			float_to_string(voltaje_pot, V_pot, 2);	//Se convierte el valor entero a caracter
     4de:	22 e0       	ldi	r18, 0x02	; 2
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	42 e2       	ldi	r20, 0x22	; 34
     4e4:	51 e0       	ldi	r21, 0x01	; 1
     4e6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <float_to_string>

			LCD_Set_Cursor(3,2);
     4ea:	62 e0       	ldi	r22, 0x02	; 2
     4ec:	83 e0       	ldi	r24, 0x03	; 3
     4ee:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_Set_Cursor>
			LCD_Write_String(V_pot);				//Se envia el valor del caracter a la LCD
     4f2:	82 e2       	ldi	r24, 0x22	; 34
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	0e 94 49 01 	call	0x292	; 0x292 <LCD_Write_String>
			
			LCD_Set_Cursor(7,2);
     4fa:	62 e0       	ldi	r22, 0x02	; 2
     4fc:	87 e0       	ldi	r24, 0x07	; 7
     4fe:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_Set_Cursor>
			LCD_Write_Char('V');
     502:	86 e5       	ldi	r24, 0x56	; 86
     504:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_Write_Char>
		
		
		
		//----> Lectura del Contador
		
		PORTC|=(1 << PORTC0);	//Se enciende la LED del Contador (Permanecera encendida si no hay comunicación)
     508:	88 b1       	in	r24, 0x08	; 8
     50a:	81 60       	ori	r24, 0x01	; 1
     50c:	88 b9       	out	0x08, r24	; 8
		
		I2C_Master_Start();
     50e:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Master_Start>
		// Escritura
		bufferI2C = slave2 << 1 & 0b11111110;	//Se configura la comunicación con el Esclavo del Contador
     512:	80 e8       	ldi	r24, 0x80	; 128
     514:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <bufferI2C>

		temp = I2C_Master_Write(bufferI2C);
     518:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
     51c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <temp>
		if(temp != 1){				//En el dado caso de no entablar conexión, se detiene la comunicación
     520:	81 30       	cpi	r24, 0x01	; 1
     522:	19 f0       	breq	.+6      	; 0x52a <main+0x128>

			I2C_Master_Stop();
     524:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
     528:	83 cf       	rjmp	.-250    	; 0x430 <main+0x2e>

			}else{					//Si se entabla conexión, se puede seguir la comunicación
			
			I2C_Master_Write('C');
     52a:	83 e4       	ldi	r24, 0x43	; 67
     52c:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
			I2C_Master_Stop();
     530:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
     534:	2f ef       	ldi	r18, 0xFF	; 255
     536:	89 e6       	ldi	r24, 0x69	; 105
     538:	98 e1       	ldi	r25, 0x18	; 24
     53a:	21 50       	subi	r18, 0x01	; 1
     53c:	80 40       	sbci	r24, 0x00	; 0
     53e:	90 40       	sbci	r25, 0x00	; 0
     540:	e1 f7       	brne	.-8      	; 0x53a <main+0x138>
     542:	00 c0       	rjmp	.+0      	; 0x544 <main+0x142>
     544:	00 00       	nop
			
			_delay_ms(500);

			//Se apaga la led del contador indicacomunicación (Parpadeara cada vez que entre al ciclo "else")
			PORTC &= ~(1 << PORTC0);
     546:	88 b1       	in	r24, 0x08	; 8
     548:	8e 7f       	andi	r24, 0xFE	; 254
     54a:	88 b9       	out	0x08, r24	; 8
			I2C_Master_Start();
     54c:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Master_Start>
			// Lectura
			bufferI2C = slave2 << 1 | 0b00000001;
     550:	81 e8       	ldi	r24, 0x81	; 129
     552:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <bufferI2C>
			
			temp = I2C_Master_Write(bufferI2C);
     556:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
     55a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <temp>
			if(temp != 1){
     55e:	81 30       	cpi	r24, 0x01	; 1
     560:	11 f0       	breq	.+4      	; 0x566 <main+0x164>
				I2C_Master_Stop();
     562:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
			}

			TWCR=(1 << TWINT)|(1 << TWEN);
     566:	84 e8       	ldi	r24, 0x84	; 132
     568:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			while (!(TWCR & (1 << TWINT)));
     56c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     570:	88 23       	and	r24, r24
     572:	e4 f7       	brge	.-8      	; 0x56c <main+0x16a>

			valorI2C= TWDR;						//Se almacena el valor del contador enviado por el esclavo
     574:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     578:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <valorI2C>

			I2C_Master_Stop();
     57c:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
			
			contador = valorI2C;				
     580:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <valorI2C>
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__floatunsisf>
     58e:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <__data_end>
     592:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <__data_end+0x1>
     596:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end+0x2>
     59a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x3>
			float_to_string(contador, CONT, 2);		//Se transforma el valor del contador a caracter
     59e:	22 e0       	ldi	r18, 0x02	; 2
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	42 e3       	ldi	r20, 0x32	; 50
     5a4:	51 e0       	ldi	r21, 0x01	; 1
     5a6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <float_to_string>

			LCD_Set_Cursor(11,2);
     5aa:	62 e0       	ldi	r22, 0x02	; 2
     5ac:	8b e0       	ldi	r24, 0x0B	; 11
     5ae:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_Set_Cursor>
			LCD_Write_String(CONT);
     5b2:	82 e3       	ldi	r24, 0x32	; 50
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	0e 94 49 01 	call	0x292	; 0x292 <LCD_Write_String>
     5ba:	3a cf       	rjmp	.-396    	; 0x430 <main+0x2e>

000005bc <__subsf3>:
     5bc:	50 58       	subi	r21, 0x80	; 128

000005be <__addsf3>:
     5be:	bb 27       	eor	r27, r27
     5c0:	aa 27       	eor	r26, r26
     5c2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__addsf3x>
     5c6:	0c 94 47 04 	jmp	0x88e	; 0x88e <__fp_round>
     5ca:	0e 94 39 04 	call	0x872	; 0x872 <__fp_pscA>
     5ce:	38 f0       	brcs	.+14     	; 0x5de <__addsf3+0x20>
     5d0:	0e 94 40 04 	call	0x880	; 0x880 <__fp_pscB>
     5d4:	20 f0       	brcs	.+8      	; 0x5de <__addsf3+0x20>
     5d6:	39 f4       	brne	.+14     	; 0x5e6 <__addsf3+0x28>
     5d8:	9f 3f       	cpi	r25, 0xFF	; 255
     5da:	19 f4       	brne	.+6      	; 0x5e2 <__addsf3+0x24>
     5dc:	26 f4       	brtc	.+8      	; 0x5e6 <__addsf3+0x28>
     5de:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_nan>
     5e2:	0e f4       	brtc	.+2      	; 0x5e6 <__addsf3+0x28>
     5e4:	e0 95       	com	r30
     5e6:	e7 fb       	bst	r30, 7
     5e8:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_inf>

000005ec <__addsf3x>:
     5ec:	e9 2f       	mov	r30, r25
     5ee:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fp_split3>
     5f2:	58 f3       	brcs	.-42     	; 0x5ca <__addsf3+0xc>
     5f4:	ba 17       	cp	r27, r26
     5f6:	62 07       	cpc	r22, r18
     5f8:	73 07       	cpc	r23, r19
     5fa:	84 07       	cpc	r24, r20
     5fc:	95 07       	cpc	r25, r21
     5fe:	20 f0       	brcs	.+8      	; 0x608 <__addsf3x+0x1c>
     600:	79 f4       	brne	.+30     	; 0x620 <__addsf3x+0x34>
     602:	a6 f5       	brtc	.+104    	; 0x66c <__addsf3x+0x80>
     604:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__fp_zero>
     608:	0e f4       	brtc	.+2      	; 0x60c <__addsf3x+0x20>
     60a:	e0 95       	com	r30
     60c:	0b 2e       	mov	r0, r27
     60e:	ba 2f       	mov	r27, r26
     610:	a0 2d       	mov	r26, r0
     612:	0b 01       	movw	r0, r22
     614:	b9 01       	movw	r22, r18
     616:	90 01       	movw	r18, r0
     618:	0c 01       	movw	r0, r24
     61a:	ca 01       	movw	r24, r20
     61c:	a0 01       	movw	r20, r0
     61e:	11 24       	eor	r1, r1
     620:	ff 27       	eor	r31, r31
     622:	59 1b       	sub	r21, r25
     624:	99 f0       	breq	.+38     	; 0x64c <__addsf3x+0x60>
     626:	59 3f       	cpi	r21, 0xF9	; 249
     628:	50 f4       	brcc	.+20     	; 0x63e <__addsf3x+0x52>
     62a:	50 3e       	cpi	r21, 0xE0	; 224
     62c:	68 f1       	brcs	.+90     	; 0x688 <__addsf3x+0x9c>
     62e:	1a 16       	cp	r1, r26
     630:	f0 40       	sbci	r31, 0x00	; 0
     632:	a2 2f       	mov	r26, r18
     634:	23 2f       	mov	r18, r19
     636:	34 2f       	mov	r19, r20
     638:	44 27       	eor	r20, r20
     63a:	58 5f       	subi	r21, 0xF8	; 248
     63c:	f3 cf       	rjmp	.-26     	; 0x624 <__addsf3x+0x38>
     63e:	46 95       	lsr	r20
     640:	37 95       	ror	r19
     642:	27 95       	ror	r18
     644:	a7 95       	ror	r26
     646:	f0 40       	sbci	r31, 0x00	; 0
     648:	53 95       	inc	r21
     64a:	c9 f7       	brne	.-14     	; 0x63e <__addsf3x+0x52>
     64c:	7e f4       	brtc	.+30     	; 0x66c <__addsf3x+0x80>
     64e:	1f 16       	cp	r1, r31
     650:	ba 0b       	sbc	r27, r26
     652:	62 0b       	sbc	r22, r18
     654:	73 0b       	sbc	r23, r19
     656:	84 0b       	sbc	r24, r20
     658:	ba f0       	brmi	.+46     	; 0x688 <__addsf3x+0x9c>
     65a:	91 50       	subi	r25, 0x01	; 1
     65c:	a1 f0       	breq	.+40     	; 0x686 <__addsf3x+0x9a>
     65e:	ff 0f       	add	r31, r31
     660:	bb 1f       	adc	r27, r27
     662:	66 1f       	adc	r22, r22
     664:	77 1f       	adc	r23, r23
     666:	88 1f       	adc	r24, r24
     668:	c2 f7       	brpl	.-16     	; 0x65a <__addsf3x+0x6e>
     66a:	0e c0       	rjmp	.+28     	; 0x688 <__addsf3x+0x9c>
     66c:	ba 0f       	add	r27, r26
     66e:	62 1f       	adc	r22, r18
     670:	73 1f       	adc	r23, r19
     672:	84 1f       	adc	r24, r20
     674:	48 f4       	brcc	.+18     	; 0x688 <__addsf3x+0x9c>
     676:	87 95       	ror	r24
     678:	77 95       	ror	r23
     67a:	67 95       	ror	r22
     67c:	b7 95       	ror	r27
     67e:	f7 95       	ror	r31
     680:	9e 3f       	cpi	r25, 0xFE	; 254
     682:	08 f0       	brcs	.+2      	; 0x686 <__addsf3x+0x9a>
     684:	b0 cf       	rjmp	.-160    	; 0x5e6 <__addsf3+0x28>
     686:	93 95       	inc	r25
     688:	88 0f       	add	r24, r24
     68a:	08 f0       	brcs	.+2      	; 0x68e <__addsf3x+0xa2>
     68c:	99 27       	eor	r25, r25
     68e:	ee 0f       	add	r30, r30
     690:	97 95       	ror	r25
     692:	87 95       	ror	r24
     694:	08 95       	ret

00000696 <__divsf3>:
     696:	0e 94 5f 03 	call	0x6be	; 0x6be <__divsf3x>
     69a:	0c 94 47 04 	jmp	0x88e	; 0x88e <__fp_round>
     69e:	0e 94 40 04 	call	0x880	; 0x880 <__fp_pscB>
     6a2:	58 f0       	brcs	.+22     	; 0x6ba <__divsf3+0x24>
     6a4:	0e 94 39 04 	call	0x872	; 0x872 <__fp_pscA>
     6a8:	40 f0       	brcs	.+16     	; 0x6ba <__divsf3+0x24>
     6aa:	29 f4       	brne	.+10     	; 0x6b6 <__divsf3+0x20>
     6ac:	5f 3f       	cpi	r21, 0xFF	; 255
     6ae:	29 f0       	breq	.+10     	; 0x6ba <__divsf3+0x24>
     6b0:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_inf>
     6b4:	51 11       	cpse	r21, r1
     6b6:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_szero>
     6ba:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_nan>

000006be <__divsf3x>:
     6be:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fp_split3>
     6c2:	68 f3       	brcs	.-38     	; 0x69e <__divsf3+0x8>

000006c4 <__divsf3_pse>:
     6c4:	99 23       	and	r25, r25
     6c6:	b1 f3       	breq	.-20     	; 0x6b4 <__divsf3+0x1e>
     6c8:	55 23       	and	r21, r21
     6ca:	91 f3       	breq	.-28     	; 0x6b0 <__divsf3+0x1a>
     6cc:	95 1b       	sub	r25, r21
     6ce:	55 0b       	sbc	r21, r21
     6d0:	bb 27       	eor	r27, r27
     6d2:	aa 27       	eor	r26, r26
     6d4:	62 17       	cp	r22, r18
     6d6:	73 07       	cpc	r23, r19
     6d8:	84 07       	cpc	r24, r20
     6da:	38 f0       	brcs	.+14     	; 0x6ea <__divsf3_pse+0x26>
     6dc:	9f 5f       	subi	r25, 0xFF	; 255
     6de:	5f 4f       	sbci	r21, 0xFF	; 255
     6e0:	22 0f       	add	r18, r18
     6e2:	33 1f       	adc	r19, r19
     6e4:	44 1f       	adc	r20, r20
     6e6:	aa 1f       	adc	r26, r26
     6e8:	a9 f3       	breq	.-22     	; 0x6d4 <__divsf3_pse+0x10>
     6ea:	35 d0       	rcall	.+106    	; 0x756 <__divsf3_pse+0x92>
     6ec:	0e 2e       	mov	r0, r30
     6ee:	3a f0       	brmi	.+14     	; 0x6fe <__divsf3_pse+0x3a>
     6f0:	e0 e8       	ldi	r30, 0x80	; 128
     6f2:	32 d0       	rcall	.+100    	; 0x758 <__divsf3_pse+0x94>
     6f4:	91 50       	subi	r25, 0x01	; 1
     6f6:	50 40       	sbci	r21, 0x00	; 0
     6f8:	e6 95       	lsr	r30
     6fa:	00 1c       	adc	r0, r0
     6fc:	ca f7       	brpl	.-14     	; 0x6f0 <__divsf3_pse+0x2c>
     6fe:	2b d0       	rcall	.+86     	; 0x756 <__divsf3_pse+0x92>
     700:	fe 2f       	mov	r31, r30
     702:	29 d0       	rcall	.+82     	; 0x756 <__divsf3_pse+0x92>
     704:	66 0f       	add	r22, r22
     706:	77 1f       	adc	r23, r23
     708:	88 1f       	adc	r24, r24
     70a:	bb 1f       	adc	r27, r27
     70c:	26 17       	cp	r18, r22
     70e:	37 07       	cpc	r19, r23
     710:	48 07       	cpc	r20, r24
     712:	ab 07       	cpc	r26, r27
     714:	b0 e8       	ldi	r27, 0x80	; 128
     716:	09 f0       	breq	.+2      	; 0x71a <__divsf3_pse+0x56>
     718:	bb 0b       	sbc	r27, r27
     71a:	80 2d       	mov	r24, r0
     71c:	bf 01       	movw	r22, r30
     71e:	ff 27       	eor	r31, r31
     720:	93 58       	subi	r25, 0x83	; 131
     722:	5f 4f       	sbci	r21, 0xFF	; 255
     724:	3a f0       	brmi	.+14     	; 0x734 <__divsf3_pse+0x70>
     726:	9e 3f       	cpi	r25, 0xFE	; 254
     728:	51 05       	cpc	r21, r1
     72a:	78 f0       	brcs	.+30     	; 0x74a <__divsf3_pse+0x86>
     72c:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_inf>
     730:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_szero>
     734:	5f 3f       	cpi	r21, 0xFF	; 255
     736:	e4 f3       	brlt	.-8      	; 0x730 <__divsf3_pse+0x6c>
     738:	98 3e       	cpi	r25, 0xE8	; 232
     73a:	d4 f3       	brlt	.-12     	; 0x730 <__divsf3_pse+0x6c>
     73c:	86 95       	lsr	r24
     73e:	77 95       	ror	r23
     740:	67 95       	ror	r22
     742:	b7 95       	ror	r27
     744:	f7 95       	ror	r31
     746:	9f 5f       	subi	r25, 0xFF	; 255
     748:	c9 f7       	brne	.-14     	; 0x73c <__divsf3_pse+0x78>
     74a:	88 0f       	add	r24, r24
     74c:	91 1d       	adc	r25, r1
     74e:	96 95       	lsr	r25
     750:	87 95       	ror	r24
     752:	97 f9       	bld	r25, 7
     754:	08 95       	ret
     756:	e1 e0       	ldi	r30, 0x01	; 1
     758:	66 0f       	add	r22, r22
     75a:	77 1f       	adc	r23, r23
     75c:	88 1f       	adc	r24, r24
     75e:	bb 1f       	adc	r27, r27
     760:	62 17       	cp	r22, r18
     762:	73 07       	cpc	r23, r19
     764:	84 07       	cpc	r24, r20
     766:	ba 07       	cpc	r27, r26
     768:	20 f0       	brcs	.+8      	; 0x772 <__divsf3_pse+0xae>
     76a:	62 1b       	sub	r22, r18
     76c:	73 0b       	sbc	r23, r19
     76e:	84 0b       	sbc	r24, r20
     770:	ba 0b       	sbc	r27, r26
     772:	ee 1f       	adc	r30, r30
     774:	88 f7       	brcc	.-30     	; 0x758 <__divsf3_pse+0x94>
     776:	e0 95       	com	r30
     778:	08 95       	ret

0000077a <__fixsfsi>:
     77a:	0e 94 c4 03 	call	0x788	; 0x788 <__fixunssfsi>
     77e:	68 94       	set
     780:	b1 11       	cpse	r27, r1
     782:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_szero>
     786:	08 95       	ret

00000788 <__fixunssfsi>:
     788:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_splitA>
     78c:	88 f0       	brcs	.+34     	; 0x7b0 <__fixunssfsi+0x28>
     78e:	9f 57       	subi	r25, 0x7F	; 127
     790:	98 f0       	brcs	.+38     	; 0x7b8 <__fixunssfsi+0x30>
     792:	b9 2f       	mov	r27, r25
     794:	99 27       	eor	r25, r25
     796:	b7 51       	subi	r27, 0x17	; 23
     798:	b0 f0       	brcs	.+44     	; 0x7c6 <__fixunssfsi+0x3e>
     79a:	e1 f0       	breq	.+56     	; 0x7d4 <__fixunssfsi+0x4c>
     79c:	66 0f       	add	r22, r22
     79e:	77 1f       	adc	r23, r23
     7a0:	88 1f       	adc	r24, r24
     7a2:	99 1f       	adc	r25, r25
     7a4:	1a f0       	brmi	.+6      	; 0x7ac <__fixunssfsi+0x24>
     7a6:	ba 95       	dec	r27
     7a8:	c9 f7       	brne	.-14     	; 0x79c <__fixunssfsi+0x14>
     7aa:	14 c0       	rjmp	.+40     	; 0x7d4 <__fixunssfsi+0x4c>
     7ac:	b1 30       	cpi	r27, 0x01	; 1
     7ae:	91 f0       	breq	.+36     	; 0x7d4 <__fixunssfsi+0x4c>
     7b0:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__fp_zero>
     7b4:	b1 e0       	ldi	r27, 0x01	; 1
     7b6:	08 95       	ret
     7b8:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__fp_zero>
     7bc:	67 2f       	mov	r22, r23
     7be:	78 2f       	mov	r23, r24
     7c0:	88 27       	eor	r24, r24
     7c2:	b8 5f       	subi	r27, 0xF8	; 248
     7c4:	39 f0       	breq	.+14     	; 0x7d4 <__fixunssfsi+0x4c>
     7c6:	b9 3f       	cpi	r27, 0xF9	; 249
     7c8:	cc f3       	brlt	.-14     	; 0x7bc <__fixunssfsi+0x34>
     7ca:	86 95       	lsr	r24
     7cc:	77 95       	ror	r23
     7ce:	67 95       	ror	r22
     7d0:	b3 95       	inc	r27
     7d2:	d9 f7       	brne	.-10     	; 0x7ca <__fixunssfsi+0x42>
     7d4:	3e f4       	brtc	.+14     	; 0x7e4 <__fixunssfsi+0x5c>
     7d6:	90 95       	com	r25
     7d8:	80 95       	com	r24
     7da:	70 95       	com	r23
     7dc:	61 95       	neg	r22
     7de:	7f 4f       	sbci	r23, 0xFF	; 255
     7e0:	8f 4f       	sbci	r24, 0xFF	; 255
     7e2:	9f 4f       	sbci	r25, 0xFF	; 255
     7e4:	08 95       	ret

000007e6 <__floatunsisf>:
     7e6:	e8 94       	clt
     7e8:	09 c0       	rjmp	.+18     	; 0x7fc <__floatsisf+0x12>

000007ea <__floatsisf>:
     7ea:	97 fb       	bst	r25, 7
     7ec:	3e f4       	brtc	.+14     	; 0x7fc <__floatsisf+0x12>
     7ee:	90 95       	com	r25
     7f0:	80 95       	com	r24
     7f2:	70 95       	com	r23
     7f4:	61 95       	neg	r22
     7f6:	7f 4f       	sbci	r23, 0xFF	; 255
     7f8:	8f 4f       	sbci	r24, 0xFF	; 255
     7fa:	9f 4f       	sbci	r25, 0xFF	; 255
     7fc:	99 23       	and	r25, r25
     7fe:	a9 f0       	breq	.+42     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     800:	f9 2f       	mov	r31, r25
     802:	96 e9       	ldi	r25, 0x96	; 150
     804:	bb 27       	eor	r27, r27
     806:	93 95       	inc	r25
     808:	f6 95       	lsr	r31
     80a:	87 95       	ror	r24
     80c:	77 95       	ror	r23
     80e:	67 95       	ror	r22
     810:	b7 95       	ror	r27
     812:	f1 11       	cpse	r31, r1
     814:	f8 cf       	rjmp	.-16     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     816:	fa f4       	brpl	.+62     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     818:	bb 0f       	add	r27, r27
     81a:	11 f4       	brne	.+4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     81c:	60 ff       	sbrs	r22, 0
     81e:	1b c0       	rjmp	.+54     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     820:	6f 5f       	subi	r22, 0xFF	; 255
     822:	7f 4f       	sbci	r23, 0xFF	; 255
     824:	8f 4f       	sbci	r24, 0xFF	; 255
     826:	9f 4f       	sbci	r25, 0xFF	; 255
     828:	16 c0       	rjmp	.+44     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     82a:	88 23       	and	r24, r24
     82c:	11 f0       	breq	.+4      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     82e:	96 e9       	ldi	r25, 0x96	; 150
     830:	11 c0       	rjmp	.+34     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     832:	77 23       	and	r23, r23
     834:	21 f0       	breq	.+8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     836:	9e e8       	ldi	r25, 0x8E	; 142
     838:	87 2f       	mov	r24, r23
     83a:	76 2f       	mov	r23, r22
     83c:	05 c0       	rjmp	.+10     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     83e:	66 23       	and	r22, r22
     840:	71 f0       	breq	.+28     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     842:	96 e8       	ldi	r25, 0x86	; 134
     844:	86 2f       	mov	r24, r22
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	2a f0       	brmi	.+10     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     84c:	9a 95       	dec	r25
     84e:	66 0f       	add	r22, r22
     850:	77 1f       	adc	r23, r23
     852:	88 1f       	adc	r24, r24
     854:	da f7       	brpl	.-10     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     856:	88 0f       	add	r24, r24
     858:	96 95       	lsr	r25
     85a:	87 95       	ror	r24
     85c:	97 f9       	bld	r25, 7
     85e:	08 95       	ret

00000860 <__fp_inf>:
     860:	97 f9       	bld	r25, 7
     862:	9f 67       	ori	r25, 0x7F	; 127
     864:	80 e8       	ldi	r24, 0x80	; 128
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	08 95       	ret

0000086c <__fp_nan>:
     86c:	9f ef       	ldi	r25, 0xFF	; 255
     86e:	80 ec       	ldi	r24, 0xC0	; 192
     870:	08 95       	ret

00000872 <__fp_pscA>:
     872:	00 24       	eor	r0, r0
     874:	0a 94       	dec	r0
     876:	16 16       	cp	r1, r22
     878:	17 06       	cpc	r1, r23
     87a:	18 06       	cpc	r1, r24
     87c:	09 06       	cpc	r0, r25
     87e:	08 95       	ret

00000880 <__fp_pscB>:
     880:	00 24       	eor	r0, r0
     882:	0a 94       	dec	r0
     884:	12 16       	cp	r1, r18
     886:	13 06       	cpc	r1, r19
     888:	14 06       	cpc	r1, r20
     88a:	05 06       	cpc	r0, r21
     88c:	08 95       	ret

0000088e <__fp_round>:
     88e:	09 2e       	mov	r0, r25
     890:	03 94       	inc	r0
     892:	00 0c       	add	r0, r0
     894:	11 f4       	brne	.+4      	; 0x89a <__fp_round+0xc>
     896:	88 23       	and	r24, r24
     898:	52 f0       	brmi	.+20     	; 0x8ae <__fp_round+0x20>
     89a:	bb 0f       	add	r27, r27
     89c:	40 f4       	brcc	.+16     	; 0x8ae <__fp_round+0x20>
     89e:	bf 2b       	or	r27, r31
     8a0:	11 f4       	brne	.+4      	; 0x8a6 <__fp_round+0x18>
     8a2:	60 ff       	sbrs	r22, 0
     8a4:	04 c0       	rjmp	.+8      	; 0x8ae <__fp_round+0x20>
     8a6:	6f 5f       	subi	r22, 0xFF	; 255
     8a8:	7f 4f       	sbci	r23, 0xFF	; 255
     8aa:	8f 4f       	sbci	r24, 0xFF	; 255
     8ac:	9f 4f       	sbci	r25, 0xFF	; 255
     8ae:	08 95       	ret

000008b0 <__fp_split3>:
     8b0:	57 fd       	sbrc	r21, 7
     8b2:	90 58       	subi	r25, 0x80	; 128
     8b4:	44 0f       	add	r20, r20
     8b6:	55 1f       	adc	r21, r21
     8b8:	59 f0       	breq	.+22     	; 0x8d0 <__fp_splitA+0x10>
     8ba:	5f 3f       	cpi	r21, 0xFF	; 255
     8bc:	71 f0       	breq	.+28     	; 0x8da <__fp_splitA+0x1a>
     8be:	47 95       	ror	r20

000008c0 <__fp_splitA>:
     8c0:	88 0f       	add	r24, r24
     8c2:	97 fb       	bst	r25, 7
     8c4:	99 1f       	adc	r25, r25
     8c6:	61 f0       	breq	.+24     	; 0x8e0 <__fp_splitA+0x20>
     8c8:	9f 3f       	cpi	r25, 0xFF	; 255
     8ca:	79 f0       	breq	.+30     	; 0x8ea <__fp_splitA+0x2a>
     8cc:	87 95       	ror	r24
     8ce:	08 95       	ret
     8d0:	12 16       	cp	r1, r18
     8d2:	13 06       	cpc	r1, r19
     8d4:	14 06       	cpc	r1, r20
     8d6:	55 1f       	adc	r21, r21
     8d8:	f2 cf       	rjmp	.-28     	; 0x8be <__fp_split3+0xe>
     8da:	46 95       	lsr	r20
     8dc:	f1 df       	rcall	.-30     	; 0x8c0 <__fp_splitA>
     8de:	08 c0       	rjmp	.+16     	; 0x8f0 <__fp_splitA+0x30>
     8e0:	16 16       	cp	r1, r22
     8e2:	17 06       	cpc	r1, r23
     8e4:	18 06       	cpc	r1, r24
     8e6:	99 1f       	adc	r25, r25
     8e8:	f1 cf       	rjmp	.-30     	; 0x8cc <__fp_splitA+0xc>
     8ea:	86 95       	lsr	r24
     8ec:	71 05       	cpc	r23, r1
     8ee:	61 05       	cpc	r22, r1
     8f0:	08 94       	sec
     8f2:	08 95       	ret

000008f4 <__fp_zero>:
     8f4:	e8 94       	clt

000008f6 <__fp_szero>:
     8f6:	bb 27       	eor	r27, r27
     8f8:	66 27       	eor	r22, r22
     8fa:	77 27       	eor	r23, r23
     8fc:	cb 01       	movw	r24, r22
     8fe:	97 f9       	bld	r25, 7
     900:	08 95       	ret

00000902 <__mulsf3>:
     902:	0e 94 94 04 	call	0x928	; 0x928 <__mulsf3x>
     906:	0c 94 47 04 	jmp	0x88e	; 0x88e <__fp_round>
     90a:	0e 94 39 04 	call	0x872	; 0x872 <__fp_pscA>
     90e:	38 f0       	brcs	.+14     	; 0x91e <__mulsf3+0x1c>
     910:	0e 94 40 04 	call	0x880	; 0x880 <__fp_pscB>
     914:	20 f0       	brcs	.+8      	; 0x91e <__mulsf3+0x1c>
     916:	95 23       	and	r25, r21
     918:	11 f0       	breq	.+4      	; 0x91e <__mulsf3+0x1c>
     91a:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_inf>
     91e:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_nan>
     922:	11 24       	eor	r1, r1
     924:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_szero>

00000928 <__mulsf3x>:
     928:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fp_split3>
     92c:	70 f3       	brcs	.-36     	; 0x90a <__mulsf3+0x8>

0000092e <__mulsf3_pse>:
     92e:	95 9f       	mul	r25, r21
     930:	c1 f3       	breq	.-16     	; 0x922 <__mulsf3+0x20>
     932:	95 0f       	add	r25, r21
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	55 1f       	adc	r21, r21
     938:	62 9f       	mul	r22, r18
     93a:	f0 01       	movw	r30, r0
     93c:	72 9f       	mul	r23, r18
     93e:	bb 27       	eor	r27, r27
     940:	f0 0d       	add	r31, r0
     942:	b1 1d       	adc	r27, r1
     944:	63 9f       	mul	r22, r19
     946:	aa 27       	eor	r26, r26
     948:	f0 0d       	add	r31, r0
     94a:	b1 1d       	adc	r27, r1
     94c:	aa 1f       	adc	r26, r26
     94e:	64 9f       	mul	r22, r20
     950:	66 27       	eor	r22, r22
     952:	b0 0d       	add	r27, r0
     954:	a1 1d       	adc	r26, r1
     956:	66 1f       	adc	r22, r22
     958:	82 9f       	mul	r24, r18
     95a:	22 27       	eor	r18, r18
     95c:	b0 0d       	add	r27, r0
     95e:	a1 1d       	adc	r26, r1
     960:	62 1f       	adc	r22, r18
     962:	73 9f       	mul	r23, r19
     964:	b0 0d       	add	r27, r0
     966:	a1 1d       	adc	r26, r1
     968:	62 1f       	adc	r22, r18
     96a:	83 9f       	mul	r24, r19
     96c:	a0 0d       	add	r26, r0
     96e:	61 1d       	adc	r22, r1
     970:	22 1f       	adc	r18, r18
     972:	74 9f       	mul	r23, r20
     974:	33 27       	eor	r19, r19
     976:	a0 0d       	add	r26, r0
     978:	61 1d       	adc	r22, r1
     97a:	23 1f       	adc	r18, r19
     97c:	84 9f       	mul	r24, r20
     97e:	60 0d       	add	r22, r0
     980:	21 1d       	adc	r18, r1
     982:	82 2f       	mov	r24, r18
     984:	76 2f       	mov	r23, r22
     986:	6a 2f       	mov	r22, r26
     988:	11 24       	eor	r1, r1
     98a:	9f 57       	subi	r25, 0x7F	; 127
     98c:	50 40       	sbci	r21, 0x00	; 0
     98e:	9a f0       	brmi	.+38     	; 0x9b6 <__mulsf3_pse+0x88>
     990:	f1 f0       	breq	.+60     	; 0x9ce <__mulsf3_pse+0xa0>
     992:	88 23       	and	r24, r24
     994:	4a f0       	brmi	.+18     	; 0x9a8 <__mulsf3_pse+0x7a>
     996:	ee 0f       	add	r30, r30
     998:	ff 1f       	adc	r31, r31
     99a:	bb 1f       	adc	r27, r27
     99c:	66 1f       	adc	r22, r22
     99e:	77 1f       	adc	r23, r23
     9a0:	88 1f       	adc	r24, r24
     9a2:	91 50       	subi	r25, 0x01	; 1
     9a4:	50 40       	sbci	r21, 0x00	; 0
     9a6:	a9 f7       	brne	.-22     	; 0x992 <__mulsf3_pse+0x64>
     9a8:	9e 3f       	cpi	r25, 0xFE	; 254
     9aa:	51 05       	cpc	r21, r1
     9ac:	80 f0       	brcs	.+32     	; 0x9ce <__mulsf3_pse+0xa0>
     9ae:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_inf>
     9b2:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_szero>
     9b6:	5f 3f       	cpi	r21, 0xFF	; 255
     9b8:	e4 f3       	brlt	.-8      	; 0x9b2 <__mulsf3_pse+0x84>
     9ba:	98 3e       	cpi	r25, 0xE8	; 232
     9bc:	d4 f3       	brlt	.-12     	; 0x9b2 <__mulsf3_pse+0x84>
     9be:	86 95       	lsr	r24
     9c0:	77 95       	ror	r23
     9c2:	67 95       	ror	r22
     9c4:	b7 95       	ror	r27
     9c6:	f7 95       	ror	r31
     9c8:	e7 95       	ror	r30
     9ca:	9f 5f       	subi	r25, 0xFF	; 255
     9cc:	c1 f7       	brne	.-16     	; 0x9be <__mulsf3_pse+0x90>
     9ce:	fe 2b       	or	r31, r30
     9d0:	88 0f       	add	r24, r24
     9d2:	91 1d       	adc	r25, r1
     9d4:	96 95       	lsr	r25
     9d6:	87 95       	ror	r24
     9d8:	97 f9       	bld	r25, 7
     9da:	08 95       	ret

000009dc <__udivmodsi4>:
     9dc:	a1 e2       	ldi	r26, 0x21	; 33
     9de:	1a 2e       	mov	r1, r26
     9e0:	aa 1b       	sub	r26, r26
     9e2:	bb 1b       	sub	r27, r27
     9e4:	fd 01       	movw	r30, r26
     9e6:	0d c0       	rjmp	.+26     	; 0xa02 <__udivmodsi4_ep>

000009e8 <__udivmodsi4_loop>:
     9e8:	aa 1f       	adc	r26, r26
     9ea:	bb 1f       	adc	r27, r27
     9ec:	ee 1f       	adc	r30, r30
     9ee:	ff 1f       	adc	r31, r31
     9f0:	a2 17       	cp	r26, r18
     9f2:	b3 07       	cpc	r27, r19
     9f4:	e4 07       	cpc	r30, r20
     9f6:	f5 07       	cpc	r31, r21
     9f8:	20 f0       	brcs	.+8      	; 0xa02 <__udivmodsi4_ep>
     9fa:	a2 1b       	sub	r26, r18
     9fc:	b3 0b       	sbc	r27, r19
     9fe:	e4 0b       	sbc	r30, r20
     a00:	f5 0b       	sbc	r31, r21

00000a02 <__udivmodsi4_ep>:
     a02:	66 1f       	adc	r22, r22
     a04:	77 1f       	adc	r23, r23
     a06:	88 1f       	adc	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	1a 94       	dec	r1
     a0c:	69 f7       	brne	.-38     	; 0x9e8 <__udivmodsi4_loop>
     a0e:	60 95       	com	r22
     a10:	70 95       	com	r23
     a12:	80 95       	com	r24
     a14:	90 95       	com	r25
     a16:	9b 01       	movw	r18, r22
     a18:	ac 01       	movw	r20, r24
     a1a:	bd 01       	movw	r22, r26
     a1c:	cf 01       	movw	r24, r30
     a1e:	08 95       	ret

00000a20 <snprintf>:
     a20:	ae e0       	ldi	r26, 0x0E	; 14
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	e6 e1       	ldi	r30, 0x16	; 22
     a26:	f5 e0       	ldi	r31, 0x05	; 5
     a28:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <__prologue_saves__+0x1c>
     a2c:	0d 89       	ldd	r16, Y+21	; 0x15
     a2e:	1e 89       	ldd	r17, Y+22	; 0x16
     a30:	8f 89       	ldd	r24, Y+23	; 0x17
     a32:	98 8d       	ldd	r25, Y+24	; 0x18
     a34:	26 e0       	ldi	r18, 0x06	; 6
     a36:	2c 83       	std	Y+4, r18	; 0x04
     a38:	1a 83       	std	Y+2, r17	; 0x02
     a3a:	09 83       	std	Y+1, r16	; 0x01
     a3c:	97 ff       	sbrs	r25, 7
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <snprintf+0x24>
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e8       	ldi	r25, 0x80	; 128
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	9e 83       	std	Y+6, r25	; 0x06
     a48:	8d 83       	std	Y+5, r24	; 0x05
     a4a:	ae 01       	movw	r20, r28
     a4c:	45 5e       	subi	r20, 0xE5	; 229
     a4e:	5f 4f       	sbci	r21, 0xFF	; 255
     a50:	69 8d       	ldd	r22, Y+25	; 0x19
     a52:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a54:	ce 01       	movw	r24, r28
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	0e 94 40 05 	call	0xa80	; 0xa80 <vfprintf>
     a5c:	4d 81       	ldd	r20, Y+5	; 0x05
     a5e:	5e 81       	ldd	r21, Y+6	; 0x06
     a60:	57 fd       	sbrc	r21, 7
     a62:	0a c0       	rjmp	.+20     	; 0xa78 <snprintf+0x58>
     a64:	2f 81       	ldd	r18, Y+7	; 0x07
     a66:	38 85       	ldd	r19, Y+8	; 0x08
     a68:	42 17       	cp	r20, r18
     a6a:	53 07       	cpc	r21, r19
     a6c:	0c f4       	brge	.+2      	; 0xa70 <snprintf+0x50>
     a6e:	9a 01       	movw	r18, r20
     a70:	f8 01       	movw	r30, r16
     a72:	e2 0f       	add	r30, r18
     a74:	f3 1f       	adc	r31, r19
     a76:	10 82       	st	Z, r1
     a78:	2e 96       	adiw	r28, 0x0e	; 14
     a7a:	e4 e0       	ldi	r30, 0x04	; 4
     a7c:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__epilogue_restores__+0x1c>

00000a80 <vfprintf>:
     a80:	ab e0       	ldi	r26, 0x0B	; 11
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	e6 e4       	ldi	r30, 0x46	; 70
     a86:	f5 e0       	ldi	r31, 0x05	; 5
     a88:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__prologue_saves__>
     a8c:	6c 01       	movw	r12, r24
     a8e:	7b 01       	movw	r14, r22
     a90:	8a 01       	movw	r16, r20
     a92:	fc 01       	movw	r30, r24
     a94:	17 82       	std	Z+7, r1	; 0x07
     a96:	16 82       	std	Z+6, r1	; 0x06
     a98:	83 81       	ldd	r24, Z+3	; 0x03
     a9a:	81 ff       	sbrs	r24, 1
     a9c:	cc c1       	rjmp	.+920    	; 0xe36 <vfprintf+0x3b6>
     a9e:	ce 01       	movw	r24, r28
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	3c 01       	movw	r6, r24
     aa4:	f6 01       	movw	r30, r12
     aa6:	93 81       	ldd	r25, Z+3	; 0x03
     aa8:	f7 01       	movw	r30, r14
     aaa:	93 fd       	sbrc	r25, 3
     aac:	85 91       	lpm	r24, Z+
     aae:	93 ff       	sbrs	r25, 3
     ab0:	81 91       	ld	r24, Z+
     ab2:	7f 01       	movw	r14, r30
     ab4:	88 23       	and	r24, r24
     ab6:	09 f4       	brne	.+2      	; 0xaba <vfprintf+0x3a>
     ab8:	ba c1       	rjmp	.+884    	; 0xe2e <vfprintf+0x3ae>
     aba:	85 32       	cpi	r24, 0x25	; 37
     abc:	39 f4       	brne	.+14     	; 0xacc <vfprintf+0x4c>
     abe:	93 fd       	sbrc	r25, 3
     ac0:	85 91       	lpm	r24, Z+
     ac2:	93 ff       	sbrs	r25, 3
     ac4:	81 91       	ld	r24, Z+
     ac6:	7f 01       	movw	r14, r30
     ac8:	85 32       	cpi	r24, 0x25	; 37
     aca:	29 f4       	brne	.+10     	; 0xad6 <vfprintf+0x56>
     acc:	b6 01       	movw	r22, r12
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 37 07 	call	0xe6e	; 0xe6e <fputc>
     ad4:	e7 cf       	rjmp	.-50     	; 0xaa4 <vfprintf+0x24>
     ad6:	91 2c       	mov	r9, r1
     ad8:	21 2c       	mov	r2, r1
     ada:	31 2c       	mov	r3, r1
     adc:	ff e1       	ldi	r31, 0x1F	; 31
     ade:	f3 15       	cp	r31, r3
     ae0:	d8 f0       	brcs	.+54     	; 0xb18 <vfprintf+0x98>
     ae2:	8b 32       	cpi	r24, 0x2B	; 43
     ae4:	79 f0       	breq	.+30     	; 0xb04 <vfprintf+0x84>
     ae6:	38 f4       	brcc	.+14     	; 0xaf6 <vfprintf+0x76>
     ae8:	80 32       	cpi	r24, 0x20	; 32
     aea:	79 f0       	breq	.+30     	; 0xb0a <vfprintf+0x8a>
     aec:	83 32       	cpi	r24, 0x23	; 35
     aee:	a1 f4       	brne	.+40     	; 0xb18 <vfprintf+0x98>
     af0:	23 2d       	mov	r18, r3
     af2:	20 61       	ori	r18, 0x10	; 16
     af4:	1d c0       	rjmp	.+58     	; 0xb30 <vfprintf+0xb0>
     af6:	8d 32       	cpi	r24, 0x2D	; 45
     af8:	61 f0       	breq	.+24     	; 0xb12 <vfprintf+0x92>
     afa:	80 33       	cpi	r24, 0x30	; 48
     afc:	69 f4       	brne	.+26     	; 0xb18 <vfprintf+0x98>
     afe:	23 2d       	mov	r18, r3
     b00:	21 60       	ori	r18, 0x01	; 1
     b02:	16 c0       	rjmp	.+44     	; 0xb30 <vfprintf+0xb0>
     b04:	83 2d       	mov	r24, r3
     b06:	82 60       	ori	r24, 0x02	; 2
     b08:	38 2e       	mov	r3, r24
     b0a:	e3 2d       	mov	r30, r3
     b0c:	e4 60       	ori	r30, 0x04	; 4
     b0e:	3e 2e       	mov	r3, r30
     b10:	2a c0       	rjmp	.+84     	; 0xb66 <vfprintf+0xe6>
     b12:	f3 2d       	mov	r31, r3
     b14:	f8 60       	ori	r31, 0x08	; 8
     b16:	1d c0       	rjmp	.+58     	; 0xb52 <vfprintf+0xd2>
     b18:	37 fc       	sbrc	r3, 7
     b1a:	2d c0       	rjmp	.+90     	; 0xb76 <vfprintf+0xf6>
     b1c:	20 ed       	ldi	r18, 0xD0	; 208
     b1e:	28 0f       	add	r18, r24
     b20:	2a 30       	cpi	r18, 0x0A	; 10
     b22:	40 f0       	brcs	.+16     	; 0xb34 <vfprintf+0xb4>
     b24:	8e 32       	cpi	r24, 0x2E	; 46
     b26:	b9 f4       	brne	.+46     	; 0xb56 <vfprintf+0xd6>
     b28:	36 fc       	sbrc	r3, 6
     b2a:	81 c1       	rjmp	.+770    	; 0xe2e <vfprintf+0x3ae>
     b2c:	23 2d       	mov	r18, r3
     b2e:	20 64       	ori	r18, 0x40	; 64
     b30:	32 2e       	mov	r3, r18
     b32:	19 c0       	rjmp	.+50     	; 0xb66 <vfprintf+0xe6>
     b34:	36 fe       	sbrs	r3, 6
     b36:	06 c0       	rjmp	.+12     	; 0xb44 <vfprintf+0xc4>
     b38:	8a e0       	ldi	r24, 0x0A	; 10
     b3a:	98 9e       	mul	r9, r24
     b3c:	20 0d       	add	r18, r0
     b3e:	11 24       	eor	r1, r1
     b40:	92 2e       	mov	r9, r18
     b42:	11 c0       	rjmp	.+34     	; 0xb66 <vfprintf+0xe6>
     b44:	ea e0       	ldi	r30, 0x0A	; 10
     b46:	2e 9e       	mul	r2, r30
     b48:	20 0d       	add	r18, r0
     b4a:	11 24       	eor	r1, r1
     b4c:	22 2e       	mov	r2, r18
     b4e:	f3 2d       	mov	r31, r3
     b50:	f0 62       	ori	r31, 0x20	; 32
     b52:	3f 2e       	mov	r3, r31
     b54:	08 c0       	rjmp	.+16     	; 0xb66 <vfprintf+0xe6>
     b56:	8c 36       	cpi	r24, 0x6C	; 108
     b58:	21 f4       	brne	.+8      	; 0xb62 <vfprintf+0xe2>
     b5a:	83 2d       	mov	r24, r3
     b5c:	80 68       	ori	r24, 0x80	; 128
     b5e:	38 2e       	mov	r3, r24
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <vfprintf+0xe6>
     b62:	88 36       	cpi	r24, 0x68	; 104
     b64:	41 f4       	brne	.+16     	; 0xb76 <vfprintf+0xf6>
     b66:	f7 01       	movw	r30, r14
     b68:	93 fd       	sbrc	r25, 3
     b6a:	85 91       	lpm	r24, Z+
     b6c:	93 ff       	sbrs	r25, 3
     b6e:	81 91       	ld	r24, Z+
     b70:	7f 01       	movw	r14, r30
     b72:	81 11       	cpse	r24, r1
     b74:	b3 cf       	rjmp	.-154    	; 0xadc <vfprintf+0x5c>
     b76:	98 2f       	mov	r25, r24
     b78:	9f 7d       	andi	r25, 0xDF	; 223
     b7a:	95 54       	subi	r25, 0x45	; 69
     b7c:	93 30       	cpi	r25, 0x03	; 3
     b7e:	28 f4       	brcc	.+10     	; 0xb8a <vfprintf+0x10a>
     b80:	0c 5f       	subi	r16, 0xFC	; 252
     b82:	1f 4f       	sbci	r17, 0xFF	; 255
     b84:	9f e3       	ldi	r25, 0x3F	; 63
     b86:	99 83       	std	Y+1, r25	; 0x01
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <vfprintf+0x124>
     b8a:	83 36       	cpi	r24, 0x63	; 99
     b8c:	31 f0       	breq	.+12     	; 0xb9a <vfprintf+0x11a>
     b8e:	83 37       	cpi	r24, 0x73	; 115
     b90:	71 f0       	breq	.+28     	; 0xbae <vfprintf+0x12e>
     b92:	83 35       	cpi	r24, 0x53	; 83
     b94:	09 f0       	breq	.+2      	; 0xb98 <vfprintf+0x118>
     b96:	59 c0       	rjmp	.+178    	; 0xc4a <vfprintf+0x1ca>
     b98:	21 c0       	rjmp	.+66     	; 0xbdc <vfprintf+0x15c>
     b9a:	f8 01       	movw	r30, r16
     b9c:	80 81       	ld	r24, Z
     b9e:	89 83       	std	Y+1, r24	; 0x01
     ba0:	0e 5f       	subi	r16, 0xFE	; 254
     ba2:	1f 4f       	sbci	r17, 0xFF	; 255
     ba4:	88 24       	eor	r8, r8
     ba6:	83 94       	inc	r8
     ba8:	91 2c       	mov	r9, r1
     baa:	53 01       	movw	r10, r6
     bac:	13 c0       	rjmp	.+38     	; 0xbd4 <vfprintf+0x154>
     bae:	28 01       	movw	r4, r16
     bb0:	f2 e0       	ldi	r31, 0x02	; 2
     bb2:	4f 0e       	add	r4, r31
     bb4:	51 1c       	adc	r5, r1
     bb6:	f8 01       	movw	r30, r16
     bb8:	a0 80       	ld	r10, Z
     bba:	b1 80       	ldd	r11, Z+1	; 0x01
     bbc:	36 fe       	sbrs	r3, 6
     bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <vfprintf+0x146>
     bc0:	69 2d       	mov	r22, r9
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <vfprintf+0x14a>
     bc6:	6f ef       	ldi	r22, 0xFF	; 255
     bc8:	7f ef       	ldi	r23, 0xFF	; 255
     bca:	c5 01       	movw	r24, r10
     bcc:	0e 94 2c 07 	call	0xe58	; 0xe58 <strnlen>
     bd0:	4c 01       	movw	r8, r24
     bd2:	82 01       	movw	r16, r4
     bd4:	f3 2d       	mov	r31, r3
     bd6:	ff 77       	andi	r31, 0x7F	; 127
     bd8:	3f 2e       	mov	r3, r31
     bda:	16 c0       	rjmp	.+44     	; 0xc08 <vfprintf+0x188>
     bdc:	28 01       	movw	r4, r16
     bde:	22 e0       	ldi	r18, 0x02	; 2
     be0:	42 0e       	add	r4, r18
     be2:	51 1c       	adc	r5, r1
     be4:	f8 01       	movw	r30, r16
     be6:	a0 80       	ld	r10, Z
     be8:	b1 80       	ldd	r11, Z+1	; 0x01
     bea:	36 fe       	sbrs	r3, 6
     bec:	03 c0       	rjmp	.+6      	; 0xbf4 <vfprintf+0x174>
     bee:	69 2d       	mov	r22, r9
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <vfprintf+0x178>
     bf4:	6f ef       	ldi	r22, 0xFF	; 255
     bf6:	7f ef       	ldi	r23, 0xFF	; 255
     bf8:	c5 01       	movw	r24, r10
     bfa:	0e 94 21 07 	call	0xe42	; 0xe42 <strnlen_P>
     bfe:	4c 01       	movw	r8, r24
     c00:	f3 2d       	mov	r31, r3
     c02:	f0 68       	ori	r31, 0x80	; 128
     c04:	3f 2e       	mov	r3, r31
     c06:	82 01       	movw	r16, r4
     c08:	33 fc       	sbrc	r3, 3
     c0a:	1b c0       	rjmp	.+54     	; 0xc42 <vfprintf+0x1c2>
     c0c:	82 2d       	mov	r24, r2
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	88 16       	cp	r8, r24
     c12:	99 06       	cpc	r9, r25
     c14:	b0 f4       	brcc	.+44     	; 0xc42 <vfprintf+0x1c2>
     c16:	b6 01       	movw	r22, r12
     c18:	80 e2       	ldi	r24, 0x20	; 32
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 37 07 	call	0xe6e	; 0xe6e <fputc>
     c20:	2a 94       	dec	r2
     c22:	f4 cf       	rjmp	.-24     	; 0xc0c <vfprintf+0x18c>
     c24:	f5 01       	movw	r30, r10
     c26:	37 fc       	sbrc	r3, 7
     c28:	85 91       	lpm	r24, Z+
     c2a:	37 fe       	sbrs	r3, 7
     c2c:	81 91       	ld	r24, Z+
     c2e:	5f 01       	movw	r10, r30
     c30:	b6 01       	movw	r22, r12
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 37 07 	call	0xe6e	; 0xe6e <fputc>
     c38:	21 10       	cpse	r2, r1
     c3a:	2a 94       	dec	r2
     c3c:	21 e0       	ldi	r18, 0x01	; 1
     c3e:	82 1a       	sub	r8, r18
     c40:	91 08       	sbc	r9, r1
     c42:	81 14       	cp	r8, r1
     c44:	91 04       	cpc	r9, r1
     c46:	71 f7       	brne	.-36     	; 0xc24 <vfprintf+0x1a4>
     c48:	e8 c0       	rjmp	.+464    	; 0xe1a <vfprintf+0x39a>
     c4a:	84 36       	cpi	r24, 0x64	; 100
     c4c:	11 f0       	breq	.+4      	; 0xc52 <vfprintf+0x1d2>
     c4e:	89 36       	cpi	r24, 0x69	; 105
     c50:	41 f5       	brne	.+80     	; 0xca2 <vfprintf+0x222>
     c52:	f8 01       	movw	r30, r16
     c54:	37 fe       	sbrs	r3, 7
     c56:	07 c0       	rjmp	.+14     	; 0xc66 <vfprintf+0x1e6>
     c58:	60 81       	ld	r22, Z
     c5a:	71 81       	ldd	r23, Z+1	; 0x01
     c5c:	82 81       	ldd	r24, Z+2	; 0x02
     c5e:	93 81       	ldd	r25, Z+3	; 0x03
     c60:	0c 5f       	subi	r16, 0xFC	; 252
     c62:	1f 4f       	sbci	r17, 0xFF	; 255
     c64:	08 c0       	rjmp	.+16     	; 0xc76 <vfprintf+0x1f6>
     c66:	60 81       	ld	r22, Z
     c68:	71 81       	ldd	r23, Z+1	; 0x01
     c6a:	07 2e       	mov	r0, r23
     c6c:	00 0c       	add	r0, r0
     c6e:	88 0b       	sbc	r24, r24
     c70:	99 0b       	sbc	r25, r25
     c72:	0e 5f       	subi	r16, 0xFE	; 254
     c74:	1f 4f       	sbci	r17, 0xFF	; 255
     c76:	f3 2d       	mov	r31, r3
     c78:	ff 76       	andi	r31, 0x6F	; 111
     c7a:	3f 2e       	mov	r3, r31
     c7c:	97 ff       	sbrs	r25, 7
     c7e:	09 c0       	rjmp	.+18     	; 0xc92 <vfprintf+0x212>
     c80:	90 95       	com	r25
     c82:	80 95       	com	r24
     c84:	70 95       	com	r23
     c86:	61 95       	neg	r22
     c88:	7f 4f       	sbci	r23, 0xFF	; 255
     c8a:	8f 4f       	sbci	r24, 0xFF	; 255
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	f0 68       	ori	r31, 0x80	; 128
     c90:	3f 2e       	mov	r3, r31
     c92:	2a e0       	ldi	r18, 0x0A	; 10
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	a3 01       	movw	r20, r6
     c98:	0e 94 73 07 	call	0xee6	; 0xee6 <__ultoa_invert>
     c9c:	88 2e       	mov	r8, r24
     c9e:	86 18       	sub	r8, r6
     ca0:	45 c0       	rjmp	.+138    	; 0xd2c <vfprintf+0x2ac>
     ca2:	85 37       	cpi	r24, 0x75	; 117
     ca4:	31 f4       	brne	.+12     	; 0xcb2 <vfprintf+0x232>
     ca6:	23 2d       	mov	r18, r3
     ca8:	2f 7e       	andi	r18, 0xEF	; 239
     caa:	b2 2e       	mov	r11, r18
     cac:	2a e0       	ldi	r18, 0x0A	; 10
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	25 c0       	rjmp	.+74     	; 0xcfc <vfprintf+0x27c>
     cb2:	93 2d       	mov	r25, r3
     cb4:	99 7f       	andi	r25, 0xF9	; 249
     cb6:	b9 2e       	mov	r11, r25
     cb8:	8f 36       	cpi	r24, 0x6F	; 111
     cba:	c1 f0       	breq	.+48     	; 0xcec <vfprintf+0x26c>
     cbc:	18 f4       	brcc	.+6      	; 0xcc4 <vfprintf+0x244>
     cbe:	88 35       	cpi	r24, 0x58	; 88
     cc0:	79 f0       	breq	.+30     	; 0xce0 <vfprintf+0x260>
     cc2:	b5 c0       	rjmp	.+362    	; 0xe2e <vfprintf+0x3ae>
     cc4:	80 37       	cpi	r24, 0x70	; 112
     cc6:	19 f0       	breq	.+6      	; 0xcce <vfprintf+0x24e>
     cc8:	88 37       	cpi	r24, 0x78	; 120
     cca:	21 f0       	breq	.+8      	; 0xcd4 <vfprintf+0x254>
     ccc:	b0 c0       	rjmp	.+352    	; 0xe2e <vfprintf+0x3ae>
     cce:	e9 2f       	mov	r30, r25
     cd0:	e0 61       	ori	r30, 0x10	; 16
     cd2:	be 2e       	mov	r11, r30
     cd4:	b4 fe       	sbrs	r11, 4
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <vfprintf+0x272>
     cd8:	fb 2d       	mov	r31, r11
     cda:	f4 60       	ori	r31, 0x04	; 4
     cdc:	bf 2e       	mov	r11, r31
     cde:	09 c0       	rjmp	.+18     	; 0xcf2 <vfprintf+0x272>
     ce0:	34 fe       	sbrs	r3, 4
     ce2:	0a c0       	rjmp	.+20     	; 0xcf8 <vfprintf+0x278>
     ce4:	29 2f       	mov	r18, r25
     ce6:	26 60       	ori	r18, 0x06	; 6
     ce8:	b2 2e       	mov	r11, r18
     cea:	06 c0       	rjmp	.+12     	; 0xcf8 <vfprintf+0x278>
     cec:	28 e0       	ldi	r18, 0x08	; 8
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	05 c0       	rjmp	.+10     	; 0xcfc <vfprintf+0x27c>
     cf2:	20 e1       	ldi	r18, 0x10	; 16
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <vfprintf+0x27c>
     cf8:	20 e1       	ldi	r18, 0x10	; 16
     cfa:	32 e0       	ldi	r19, 0x02	; 2
     cfc:	f8 01       	movw	r30, r16
     cfe:	b7 fe       	sbrs	r11, 7
     d00:	07 c0       	rjmp	.+14     	; 0xd10 <vfprintf+0x290>
     d02:	60 81       	ld	r22, Z
     d04:	71 81       	ldd	r23, Z+1	; 0x01
     d06:	82 81       	ldd	r24, Z+2	; 0x02
     d08:	93 81       	ldd	r25, Z+3	; 0x03
     d0a:	0c 5f       	subi	r16, 0xFC	; 252
     d0c:	1f 4f       	sbci	r17, 0xFF	; 255
     d0e:	06 c0       	rjmp	.+12     	; 0xd1c <vfprintf+0x29c>
     d10:	60 81       	ld	r22, Z
     d12:	71 81       	ldd	r23, Z+1	; 0x01
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 5f       	subi	r16, 0xFE	; 254
     d1a:	1f 4f       	sbci	r17, 0xFF	; 255
     d1c:	a3 01       	movw	r20, r6
     d1e:	0e 94 73 07 	call	0xee6	; 0xee6 <__ultoa_invert>
     d22:	88 2e       	mov	r8, r24
     d24:	86 18       	sub	r8, r6
     d26:	fb 2d       	mov	r31, r11
     d28:	ff 77       	andi	r31, 0x7F	; 127
     d2a:	3f 2e       	mov	r3, r31
     d2c:	36 fe       	sbrs	r3, 6
     d2e:	0d c0       	rjmp	.+26     	; 0xd4a <vfprintf+0x2ca>
     d30:	23 2d       	mov	r18, r3
     d32:	2e 7f       	andi	r18, 0xFE	; 254
     d34:	a2 2e       	mov	r10, r18
     d36:	89 14       	cp	r8, r9
     d38:	58 f4       	brcc	.+22     	; 0xd50 <vfprintf+0x2d0>
     d3a:	34 fe       	sbrs	r3, 4
     d3c:	0b c0       	rjmp	.+22     	; 0xd54 <vfprintf+0x2d4>
     d3e:	32 fc       	sbrc	r3, 2
     d40:	09 c0       	rjmp	.+18     	; 0xd54 <vfprintf+0x2d4>
     d42:	83 2d       	mov	r24, r3
     d44:	8e 7e       	andi	r24, 0xEE	; 238
     d46:	a8 2e       	mov	r10, r24
     d48:	05 c0       	rjmp	.+10     	; 0xd54 <vfprintf+0x2d4>
     d4a:	b8 2c       	mov	r11, r8
     d4c:	a3 2c       	mov	r10, r3
     d4e:	03 c0       	rjmp	.+6      	; 0xd56 <vfprintf+0x2d6>
     d50:	b8 2c       	mov	r11, r8
     d52:	01 c0       	rjmp	.+2      	; 0xd56 <vfprintf+0x2d6>
     d54:	b9 2c       	mov	r11, r9
     d56:	a4 fe       	sbrs	r10, 4
     d58:	0f c0       	rjmp	.+30     	; 0xd78 <vfprintf+0x2f8>
     d5a:	fe 01       	movw	r30, r28
     d5c:	e8 0d       	add	r30, r8
     d5e:	f1 1d       	adc	r31, r1
     d60:	80 81       	ld	r24, Z
     d62:	80 33       	cpi	r24, 0x30	; 48
     d64:	21 f4       	brne	.+8      	; 0xd6e <vfprintf+0x2ee>
     d66:	9a 2d       	mov	r25, r10
     d68:	99 7e       	andi	r25, 0xE9	; 233
     d6a:	a9 2e       	mov	r10, r25
     d6c:	09 c0       	rjmp	.+18     	; 0xd80 <vfprintf+0x300>
     d6e:	a2 fe       	sbrs	r10, 2
     d70:	06 c0       	rjmp	.+12     	; 0xd7e <vfprintf+0x2fe>
     d72:	b3 94       	inc	r11
     d74:	b3 94       	inc	r11
     d76:	04 c0       	rjmp	.+8      	; 0xd80 <vfprintf+0x300>
     d78:	8a 2d       	mov	r24, r10
     d7a:	86 78       	andi	r24, 0x86	; 134
     d7c:	09 f0       	breq	.+2      	; 0xd80 <vfprintf+0x300>
     d7e:	b3 94       	inc	r11
     d80:	a3 fc       	sbrc	r10, 3
     d82:	11 c0       	rjmp	.+34     	; 0xda6 <vfprintf+0x326>
     d84:	a0 fe       	sbrs	r10, 0
     d86:	06 c0       	rjmp	.+12     	; 0xd94 <vfprintf+0x314>
     d88:	b2 14       	cp	r11, r2
     d8a:	88 f4       	brcc	.+34     	; 0xdae <vfprintf+0x32e>
     d8c:	28 0c       	add	r2, r8
     d8e:	92 2c       	mov	r9, r2
     d90:	9b 18       	sub	r9, r11
     d92:	0e c0       	rjmp	.+28     	; 0xdb0 <vfprintf+0x330>
     d94:	b2 14       	cp	r11, r2
     d96:	60 f4       	brcc	.+24     	; 0xdb0 <vfprintf+0x330>
     d98:	b6 01       	movw	r22, r12
     d9a:	80 e2       	ldi	r24, 0x20	; 32
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 37 07 	call	0xe6e	; 0xe6e <fputc>
     da2:	b3 94       	inc	r11
     da4:	f7 cf       	rjmp	.-18     	; 0xd94 <vfprintf+0x314>
     da6:	b2 14       	cp	r11, r2
     da8:	18 f4       	brcc	.+6      	; 0xdb0 <vfprintf+0x330>
     daa:	2b 18       	sub	r2, r11
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <vfprintf+0x332>
     dae:	98 2c       	mov	r9, r8
     db0:	21 2c       	mov	r2, r1
     db2:	a4 fe       	sbrs	r10, 4
     db4:	10 c0       	rjmp	.+32     	; 0xdd6 <vfprintf+0x356>
     db6:	b6 01       	movw	r22, r12
     db8:	80 e3       	ldi	r24, 0x30	; 48
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 37 07 	call	0xe6e	; 0xe6e <fputc>
     dc0:	a2 fe       	sbrs	r10, 2
     dc2:	17 c0       	rjmp	.+46     	; 0xdf2 <vfprintf+0x372>
     dc4:	a1 fc       	sbrc	r10, 1
     dc6:	03 c0       	rjmp	.+6      	; 0xdce <vfprintf+0x34e>
     dc8:	88 e7       	ldi	r24, 0x78	; 120
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <vfprintf+0x352>
     dce:	88 e5       	ldi	r24, 0x58	; 88
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	b6 01       	movw	r22, r12
     dd4:	0c c0       	rjmp	.+24     	; 0xdee <vfprintf+0x36e>
     dd6:	8a 2d       	mov	r24, r10
     dd8:	86 78       	andi	r24, 0x86	; 134
     dda:	59 f0       	breq	.+22     	; 0xdf2 <vfprintf+0x372>
     ddc:	a1 fe       	sbrs	r10, 1
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <vfprintf+0x364>
     de0:	8b e2       	ldi	r24, 0x2B	; 43
     de2:	01 c0       	rjmp	.+2      	; 0xde6 <vfprintf+0x366>
     de4:	80 e2       	ldi	r24, 0x20	; 32
     de6:	a7 fc       	sbrc	r10, 7
     de8:	8d e2       	ldi	r24, 0x2D	; 45
     dea:	b6 01       	movw	r22, r12
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 37 07 	call	0xe6e	; 0xe6e <fputc>
     df2:	89 14       	cp	r8, r9
     df4:	38 f4       	brcc	.+14     	; 0xe04 <vfprintf+0x384>
     df6:	b6 01       	movw	r22, r12
     df8:	80 e3       	ldi	r24, 0x30	; 48
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 37 07 	call	0xe6e	; 0xe6e <fputc>
     e00:	9a 94       	dec	r9
     e02:	f7 cf       	rjmp	.-18     	; 0xdf2 <vfprintf+0x372>
     e04:	8a 94       	dec	r8
     e06:	f3 01       	movw	r30, r6
     e08:	e8 0d       	add	r30, r8
     e0a:	f1 1d       	adc	r31, r1
     e0c:	80 81       	ld	r24, Z
     e0e:	b6 01       	movw	r22, r12
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 37 07 	call	0xe6e	; 0xe6e <fputc>
     e16:	81 10       	cpse	r8, r1
     e18:	f5 cf       	rjmp	.-22     	; 0xe04 <vfprintf+0x384>
     e1a:	22 20       	and	r2, r2
     e1c:	09 f4       	brne	.+2      	; 0xe20 <vfprintf+0x3a0>
     e1e:	42 ce       	rjmp	.-892    	; 0xaa4 <vfprintf+0x24>
     e20:	b6 01       	movw	r22, r12
     e22:	80 e2       	ldi	r24, 0x20	; 32
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 37 07 	call	0xe6e	; 0xe6e <fputc>
     e2a:	2a 94       	dec	r2
     e2c:	f6 cf       	rjmp	.-20     	; 0xe1a <vfprintf+0x39a>
     e2e:	f6 01       	movw	r30, r12
     e30:	86 81       	ldd	r24, Z+6	; 0x06
     e32:	97 81       	ldd	r25, Z+7	; 0x07
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <vfprintf+0x3ba>
     e36:	8f ef       	ldi	r24, 0xFF	; 255
     e38:	9f ef       	ldi	r25, 0xFF	; 255
     e3a:	2b 96       	adiw	r28, 0x0b	; 11
     e3c:	e2 e1       	ldi	r30, 0x12	; 18
     e3e:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__epilogue_restores__>

00000e42 <strnlen_P>:
     e42:	fc 01       	movw	r30, r24
     e44:	05 90       	lpm	r0, Z+
     e46:	61 50       	subi	r22, 0x01	; 1
     e48:	70 40       	sbci	r23, 0x00	; 0
     e4a:	01 10       	cpse	r0, r1
     e4c:	d8 f7       	brcc	.-10     	; 0xe44 <strnlen_P+0x2>
     e4e:	80 95       	com	r24
     e50:	90 95       	com	r25
     e52:	8e 0f       	add	r24, r30
     e54:	9f 1f       	adc	r25, r31
     e56:	08 95       	ret

00000e58 <strnlen>:
     e58:	fc 01       	movw	r30, r24
     e5a:	61 50       	subi	r22, 0x01	; 1
     e5c:	70 40       	sbci	r23, 0x00	; 0
     e5e:	01 90       	ld	r0, Z+
     e60:	01 10       	cpse	r0, r1
     e62:	d8 f7       	brcc	.-10     	; 0xe5a <strnlen+0x2>
     e64:	80 95       	com	r24
     e66:	90 95       	com	r25
     e68:	8e 0f       	add	r24, r30
     e6a:	9f 1f       	adc	r25, r31
     e6c:	08 95       	ret

00000e6e <fputc>:
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	fb 01       	movw	r30, r22
     e78:	23 81       	ldd	r18, Z+3	; 0x03
     e7a:	21 fd       	sbrc	r18, 1
     e7c:	03 c0       	rjmp	.+6      	; 0xe84 <fputc+0x16>
     e7e:	8f ef       	ldi	r24, 0xFF	; 255
     e80:	9f ef       	ldi	r25, 0xFF	; 255
     e82:	2c c0       	rjmp	.+88     	; 0xedc <fputc+0x6e>
     e84:	22 ff       	sbrs	r18, 2
     e86:	16 c0       	rjmp	.+44     	; 0xeb4 <fputc+0x46>
     e88:	46 81       	ldd	r20, Z+6	; 0x06
     e8a:	57 81       	ldd	r21, Z+7	; 0x07
     e8c:	24 81       	ldd	r18, Z+4	; 0x04
     e8e:	35 81       	ldd	r19, Z+5	; 0x05
     e90:	42 17       	cp	r20, r18
     e92:	53 07       	cpc	r21, r19
     e94:	44 f4       	brge	.+16     	; 0xea6 <fputc+0x38>
     e96:	a0 81       	ld	r26, Z
     e98:	b1 81       	ldd	r27, Z+1	; 0x01
     e9a:	9d 01       	movw	r18, r26
     e9c:	2f 5f       	subi	r18, 0xFF	; 255
     e9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ea0:	31 83       	std	Z+1, r19	; 0x01
     ea2:	20 83       	st	Z, r18
     ea4:	8c 93       	st	X, r24
     ea6:	26 81       	ldd	r18, Z+6	; 0x06
     ea8:	37 81       	ldd	r19, Z+7	; 0x07
     eaa:	2f 5f       	subi	r18, 0xFF	; 255
     eac:	3f 4f       	sbci	r19, 0xFF	; 255
     eae:	37 83       	std	Z+7, r19	; 0x07
     eb0:	26 83       	std	Z+6, r18	; 0x06
     eb2:	14 c0       	rjmp	.+40     	; 0xedc <fputc+0x6e>
     eb4:	8b 01       	movw	r16, r22
     eb6:	ec 01       	movw	r28, r24
     eb8:	fb 01       	movw	r30, r22
     eba:	00 84       	ldd	r0, Z+8	; 0x08
     ebc:	f1 85       	ldd	r31, Z+9	; 0x09
     ebe:	e0 2d       	mov	r30, r0
     ec0:	09 95       	icall
     ec2:	89 2b       	or	r24, r25
     ec4:	e1 f6       	brne	.-72     	; 0xe7e <fputc+0x10>
     ec6:	d8 01       	movw	r26, r16
     ec8:	16 96       	adiw	r26, 0x06	; 6
     eca:	8d 91       	ld	r24, X+
     ecc:	9c 91       	ld	r25, X
     ece:	17 97       	sbiw	r26, 0x07	; 7
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	17 96       	adiw	r26, 0x07	; 7
     ed4:	9c 93       	st	X, r25
     ed6:	8e 93       	st	-X, r24
     ed8:	16 97       	sbiw	r26, 0x06	; 6
     eda:	ce 01       	movw	r24, r28
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	08 95       	ret

00000ee6 <__ultoa_invert>:
     ee6:	fa 01       	movw	r30, r20
     ee8:	aa 27       	eor	r26, r26
     eea:	28 30       	cpi	r18, 0x08	; 8
     eec:	51 f1       	breq	.+84     	; 0xf42 <__ultoa_invert+0x5c>
     eee:	20 31       	cpi	r18, 0x10	; 16
     ef0:	81 f1       	breq	.+96     	; 0xf52 <__ultoa_invert+0x6c>
     ef2:	e8 94       	clt
     ef4:	6f 93       	push	r22
     ef6:	6e 7f       	andi	r22, 0xFE	; 254
     ef8:	6e 5f       	subi	r22, 0xFE	; 254
     efa:	7f 4f       	sbci	r23, 0xFF	; 255
     efc:	8f 4f       	sbci	r24, 0xFF	; 255
     efe:	9f 4f       	sbci	r25, 0xFF	; 255
     f00:	af 4f       	sbci	r26, 0xFF	; 255
     f02:	b1 e0       	ldi	r27, 0x01	; 1
     f04:	3e d0       	rcall	.+124    	; 0xf82 <__ultoa_invert+0x9c>
     f06:	b4 e0       	ldi	r27, 0x04	; 4
     f08:	3c d0       	rcall	.+120    	; 0xf82 <__ultoa_invert+0x9c>
     f0a:	67 0f       	add	r22, r23
     f0c:	78 1f       	adc	r23, r24
     f0e:	89 1f       	adc	r24, r25
     f10:	9a 1f       	adc	r25, r26
     f12:	a1 1d       	adc	r26, r1
     f14:	68 0f       	add	r22, r24
     f16:	79 1f       	adc	r23, r25
     f18:	8a 1f       	adc	r24, r26
     f1a:	91 1d       	adc	r25, r1
     f1c:	a1 1d       	adc	r26, r1
     f1e:	6a 0f       	add	r22, r26
     f20:	71 1d       	adc	r23, r1
     f22:	81 1d       	adc	r24, r1
     f24:	91 1d       	adc	r25, r1
     f26:	a1 1d       	adc	r26, r1
     f28:	20 d0       	rcall	.+64     	; 0xf6a <__ultoa_invert+0x84>
     f2a:	09 f4       	brne	.+2      	; 0xf2e <__ultoa_invert+0x48>
     f2c:	68 94       	set
     f2e:	3f 91       	pop	r19
     f30:	2a e0       	ldi	r18, 0x0A	; 10
     f32:	26 9f       	mul	r18, r22
     f34:	11 24       	eor	r1, r1
     f36:	30 19       	sub	r19, r0
     f38:	30 5d       	subi	r19, 0xD0	; 208
     f3a:	31 93       	st	Z+, r19
     f3c:	de f6       	brtc	.-74     	; 0xef4 <__ultoa_invert+0xe>
     f3e:	cf 01       	movw	r24, r30
     f40:	08 95       	ret
     f42:	46 2f       	mov	r20, r22
     f44:	47 70       	andi	r20, 0x07	; 7
     f46:	40 5d       	subi	r20, 0xD0	; 208
     f48:	41 93       	st	Z+, r20
     f4a:	b3 e0       	ldi	r27, 0x03	; 3
     f4c:	0f d0       	rcall	.+30     	; 0xf6c <__ultoa_invert+0x86>
     f4e:	c9 f7       	brne	.-14     	; 0xf42 <__ultoa_invert+0x5c>
     f50:	f6 cf       	rjmp	.-20     	; 0xf3e <__ultoa_invert+0x58>
     f52:	46 2f       	mov	r20, r22
     f54:	4f 70       	andi	r20, 0x0F	; 15
     f56:	40 5d       	subi	r20, 0xD0	; 208
     f58:	4a 33       	cpi	r20, 0x3A	; 58
     f5a:	18 f0       	brcs	.+6      	; 0xf62 <__ultoa_invert+0x7c>
     f5c:	49 5d       	subi	r20, 0xD9	; 217
     f5e:	31 fd       	sbrc	r19, 1
     f60:	40 52       	subi	r20, 0x20	; 32
     f62:	41 93       	st	Z+, r20
     f64:	02 d0       	rcall	.+4      	; 0xf6a <__ultoa_invert+0x84>
     f66:	a9 f7       	brne	.-22     	; 0xf52 <__ultoa_invert+0x6c>
     f68:	ea cf       	rjmp	.-44     	; 0xf3e <__ultoa_invert+0x58>
     f6a:	b4 e0       	ldi	r27, 0x04	; 4
     f6c:	a6 95       	lsr	r26
     f6e:	97 95       	ror	r25
     f70:	87 95       	ror	r24
     f72:	77 95       	ror	r23
     f74:	67 95       	ror	r22
     f76:	ba 95       	dec	r27
     f78:	c9 f7       	brne	.-14     	; 0xf6c <__ultoa_invert+0x86>
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	61 05       	cpc	r22, r1
     f7e:	71 05       	cpc	r23, r1
     f80:	08 95       	ret
     f82:	9b 01       	movw	r18, r22
     f84:	ac 01       	movw	r20, r24
     f86:	0a 2e       	mov	r0, r26
     f88:	06 94       	lsr	r0
     f8a:	57 95       	ror	r21
     f8c:	47 95       	ror	r20
     f8e:	37 95       	ror	r19
     f90:	27 95       	ror	r18
     f92:	ba 95       	dec	r27
     f94:	c9 f7       	brne	.-14     	; 0xf88 <__ultoa_invert+0xa2>
     f96:	62 0f       	add	r22, r18
     f98:	73 1f       	adc	r23, r19
     f9a:	84 1f       	adc	r24, r20
     f9c:	95 1f       	adc	r25, r21
     f9e:	a0 1d       	adc	r26, r0
     fa0:	08 95       	ret

00000fa2 <__prologue_saves__>:
     fa2:	2f 92       	push	r2
     fa4:	3f 92       	push	r3
     fa6:	4f 92       	push	r4
     fa8:	5f 92       	push	r5
     faa:	6f 92       	push	r6
     fac:	7f 92       	push	r7
     fae:	8f 92       	push	r8
     fb0:	9f 92       	push	r9
     fb2:	af 92       	push	r10
     fb4:	bf 92       	push	r11
     fb6:	cf 92       	push	r12
     fb8:	df 92       	push	r13
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	ca 1b       	sub	r28, r26
     fcc:	db 0b       	sbc	r29, r27
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	09 94       	ijmp

00000fda <__epilogue_restores__>:
     fda:	2a 88       	ldd	r2, Y+18	; 0x12
     fdc:	39 88       	ldd	r3, Y+17	; 0x11
     fde:	48 88       	ldd	r4, Y+16	; 0x10
     fe0:	5f 84       	ldd	r5, Y+15	; 0x0f
     fe2:	6e 84       	ldd	r6, Y+14	; 0x0e
     fe4:	7d 84       	ldd	r7, Y+13	; 0x0d
     fe6:	8c 84       	ldd	r8, Y+12	; 0x0c
     fe8:	9b 84       	ldd	r9, Y+11	; 0x0b
     fea:	aa 84       	ldd	r10, Y+10	; 0x0a
     fec:	b9 84       	ldd	r11, Y+9	; 0x09
     fee:	c8 84       	ldd	r12, Y+8	; 0x08
     ff0:	df 80       	ldd	r13, Y+7	; 0x07
     ff2:	ee 80       	ldd	r14, Y+6	; 0x06
     ff4:	fd 80       	ldd	r15, Y+5	; 0x05
     ff6:	0c 81       	ldd	r16, Y+4	; 0x04
     ff8:	1b 81       	ldd	r17, Y+3	; 0x03
     ffa:	aa 81       	ldd	r26, Y+2	; 0x02
     ffc:	b9 81       	ldd	r27, Y+1	; 0x01
     ffe:	ce 0f       	add	r28, r30
    1000:	d1 1d       	adc	r29, r1
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	ed 01       	movw	r28, r26
    100e:	08 95       	ret

00001010 <_exit>:
    1010:	f8 94       	cli

00001012 <__stop_program>:
    1012:	ff cf       	rjmp	.-2      	; 0x1012 <__stop_program>
