
TWI_SLAVE_Contador.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009bf  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082e  00000000  00000000  00000db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000609  00000000  00000000  000015e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d2  00000000  00000000  00001d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d4  00000000  00000000  000021ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000024c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 92 00 	call	0x124	; 0x124 <main>
  88:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Slave_Init>:
//******************************************************************************************************************
//FUNCION PARA INICIALIAR EL ESCLAVO
//******************************************************************************************************************

void I2C_Slave_Init(uint8_t address){
	DDRC &= ~((1 << DDC4)|(1 << DDC5));		// Pines de i2c como entradas
  90:	97 b1       	in	r25, 0x07	; 7
  92:	9f 7c       	andi	r25, 0xCF	; 207
  94:	97 b9       	out	0x07, r25	; 7

	TWAR = address << 1; // Se asigna la direccion que tendra
  96:	88 0f       	add	r24, r24
  98:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	//TWAR = (address << 1| 0x01); // Se asigna la direccion que tendra y habilita llamada general

	// Se habilita la interfaz, ACK automatico, se habilita la ISR
	TWCR=(1 << TWEA)|(1 << TWEN)|(1 << TWIE);
  9c:	85 e4       	ldi	r24, 0x45	; 69
  9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a2:	08 95       	ret

000000a4 <Boton_inter>:

}

void Boton_inter(void){
	//INTERRUPCION PUERTYO C
	PCICR |= (1<<PCIE1);		//PCIE1 -  PCINT[14:8] -> equivale de PC0 a PC6
  a4:	e8 e6       	ldi	r30, 0x68	; 104
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	80 83       	st	Z, r24
	
	//HABILITAR  PCINT1
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9);		//Al trabajar en PCIE1 se debe usar PCMSK18 (Puerto C)
  ae:	ec e6       	ldi	r30, 0x6C	; 108
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	83 60       	ori	r24, 0x03	; 3
  b6:	80 83       	st	Z, r24
  b8:	08 95       	ret

000000ba <refreshPORT>:


//Se desarrolla la función que emplearan las leds (Contador)
void refreshPORT(uint8_t valor){

	if(valor & 0b00001000){
  ba:	83 ff       	sbrs	r24, 3
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <refreshPORT+0xc>

		PORTD |= (1 << PORTD5);
  be:	9b b1       	in	r25, 0x0b	; 11
  c0:	90 62       	ori	r25, 0x20	; 32
  c2:	9b b9       	out	0x0b, r25	; 11
  c4:	03 c0       	rjmp	.+6      	; 0xcc <refreshPORT+0x12>

		}else{

		PORTD &= ~(1 << PORTD5);
  c6:	9b b1       	in	r25, 0x0b	; 11
  c8:	9f 7d       	andi	r25, 0xDF	; 223
  ca:	9b b9       	out	0x0b, r25	; 11

	}

	if(valor & 0b00000100){
  cc:	82 ff       	sbrs	r24, 2
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <refreshPORT+0x1e>

		PORTD |= (1 << PORTD4);
  d0:	9b b1       	in	r25, 0x0b	; 11
  d2:	90 61       	ori	r25, 0x10	; 16
  d4:	9b b9       	out	0x0b, r25	; 11
  d6:	03 c0       	rjmp	.+6      	; 0xde <refreshPORT+0x24>

		}else{

		PORTD &= ~(1 << PORTD4);
  d8:	9b b1       	in	r25, 0x0b	; 11
  da:	9f 7e       	andi	r25, 0xEF	; 239
  dc:	9b b9       	out	0x0b, r25	; 11

	}

	if(valor & 0b00000010){
  de:	81 ff       	sbrs	r24, 1
  e0:	04 c0       	rjmp	.+8      	; 0xea <refreshPORT+0x30>

		PORTD |= (1 << PORTD3);
  e2:	9b b1       	in	r25, 0x0b	; 11
  e4:	98 60       	ori	r25, 0x08	; 8
  e6:	9b b9       	out	0x0b, r25	; 11
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <refreshPORT+0x36>

		}else{

		PORTD &= ~(1 << PORTD3);
  ea:	9b b1       	in	r25, 0x0b	; 11
  ec:	97 7f       	andi	r25, 0xF7	; 247
  ee:	9b b9       	out	0x0b, r25	; 11

	}	if(valor & 0b00000001){
  f0:	80 ff       	sbrs	r24, 0
  f2:	04 c0       	rjmp	.+8      	; 0xfc <refreshPORT+0x42>
		PORTD |= (1 << PORTD2);
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	84 60       	ori	r24, 0x04	; 4
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	08 95       	ret
		}else{
		PORTD &= ~(1 << PORTD2);
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8b 7f       	andi	r24, 0xFB	; 251
 100:	8b b9       	out	0x0b, r24	; 11
 102:	08 95       	ret

00000104 <init_setup>:
//FUNCIONES
//******************************************************************************************************************

void init_setup(void){
	// Configuración de los puertos de Salida
	DDRD |=(1 << DDD2)|(1 << DDD3)|(1 << DDD4)|(1 << DDD5);		//Configuración de las salidas de las LEDS
 104:	8a b1       	in	r24, 0x0a	; 10
 106:	8c 63       	ori	r24, 0x3C	; 60
 108:	8a b9       	out	0x0a, r24	; 10
	refreshPORT(0);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 5d 00 	call	0xba	; 0xba <refreshPORT>
	DDRB |=(1 << DDB5);			//Se configura la LED de conexión
 110:	84 b1       	in	r24, 0x04	; 4
 112:	80 62       	ori	r24, 0x20	; 32
 114:	84 b9       	out	0x04, r24	; 4
	
	//Configuración de los puertos de Entrada
	DDRC &= ~((1<<PC0)|(1<<PC1));		//Configurar PC0 y PC1 como entras
 116:	87 b1       	in	r24, 0x07	; 7
 118:	8c 7f       	andi	r24, 0xFC	; 252
 11a:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<PC0)|(1<<PC1);			// Habilitar resistencias de PULL-UP para PC0 y PC1 
 11c:	88 b1       	in	r24, 0x08	; 8
 11e:	83 60       	ori	r24, 0x03	; 3
 120:	88 b9       	out	0x08, r24	; 8
 122:	08 95       	ret

00000124 <main>:
//******************************************************************************************************************

int main(void)
{
	//Se define la salida de la Led de "Conexión"
	DDRB |=(1 << DDB5);		//Se configura PB5 como salida
 124:	84 b1       	in	r24, 0x04	; 4
 126:	80 62       	ori	r24, 0x20	; 32
 128:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PORTB5);	//Se apaga la salida de PB5
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	8f 7d       	andi	r24, 0xDF	; 223
 12e:	85 b9       	out	0x05, r24	; 5
	init_setup();	//Se llama a la función de la configuración de puertos (entradas y salidas)
 130:	0e 94 82 00 	call	0x104	; 0x104 <init_setup>

	I2C_Slave_Init(SlaveAddress);		//Se inicia el esclavo con la dirección del maestro designada
 134:	80 e4       	ldi	r24, 0x40	; 64
 136:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Slave_Init>
	
	Boton_inter();		//Se llama a la configuración de los botones
 13a:	0e 94 52 00 	call	0xa4	; 0xa4 <Boton_inter>

	sei();		// Habilitar Interrupciones generales
 13e:	78 94       	sei
 
    while (1) 

    {
		// Iniciando secuencia del contador
		contacom = COUNT;
 140:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <COUNT>
 144:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <COUNT+0x1>
 148:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		refreshPORT(COUNT);
 14c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <COUNT>
 150:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <COUNT+0x1>
 154:	0e 94 5d 00 	call	0xba	; 0xba <refreshPORT>
		if (buffer=='C')		//Se lee el "Comando" enviado por el maestro
 158:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <buffer>
 15c:	83 34       	cpi	r24, 0x43	; 67
 15e:	81 f7       	brne	.-32     	; 0x140 <main+0x1c>
		{
			PINB |= (1<<PINB5);		//La led parpadea si se establecio contacto
 160:	83 b1       	in	r24, 0x03	; 3
 162:	80 62       	ori	r24, 0x20	; 32
 164:	83 b9       	out	0x03, r24	; 3
			buffer= 0;				//Se setea en 0, y envia el valor del contador
 166:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <buffer>
 16a:	ea cf       	rjmp	.-44     	; 0x140 <main+0x1c>

0000016c <__vector_24>:

//******************************************************************************************************************
//INTERRUPCIONES
//******************************************************************************************************************

ISR(TWI_vect){
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	8f 93       	push	r24
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
	uint8_t estado;
	estado = TWSR & 0xFC;
 17c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 180:	8c 7f       	andi	r24, 0xFC	; 252
	switch(estado){
 182:	80 38       	cpi	r24, 0x80	; 128
 184:	99 f0       	breq	.+38     	; 0x1ac <__vector_24+0x40>
 186:	28 f4       	brcc	.+10     	; 0x192 <__vector_24+0x26>
 188:	80 36       	cpi	r24, 0x60	; 96
 18a:	51 f0       	breq	.+20     	; 0x1a0 <__vector_24+0x34>
 18c:	80 37       	cpi	r24, 0x70	; 112
 18e:	41 f0       	breq	.+16     	; 0x1a0 <__vector_24+0x34>
 190:	1f c0       	rjmp	.+62     	; 0x1d0 <__vector_24+0x64>
 192:	88 3a       	cpi	r24, 0xA8	; 168
 194:	a9 f0       	breq	.+42     	; 0x1c0 <__vector_24+0x54>
 196:	88 3b       	cpi	r24, 0xB8	; 184
 198:	99 f0       	breq	.+38     	; 0x1c0 <__vector_24+0x54>
 19a:	80 39       	cpi	r24, 0x90	; 144
 19c:	c9 f4       	brne	.+50     	; 0x1d0 <__vector_24+0x64>
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <__vector_24+0x40>
		case 0x60:
		case 0x70:
		TWCR |=(1 << TWINT);
 1a0:	ec eb       	ldi	r30, 0xBC	; 188
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	80 68       	ori	r24, 0x80	; 128
 1a8:	80 83       	st	Z, r24
		break;
 1aa:	17 c0       	rjmp	.+46     	; 0x1da <__vector_24+0x6e>
		case 0x80:
		case 0x90:
		buffer = TWDR;		//Se carga el "Comando" enviado por el Maestro
 1ac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1b0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <buffer>
		TWCR |= (1 << TWINT); // Se limpia la bandera
 1b4:	ec eb       	ldi	r30, 0xBC	; 188
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	80 83       	st	Z, r24
		break;
 1be:	0d c0       	rjmp	.+26     	; 0x1da <__vector_24+0x6e>
		case 0xA8:
		case 0xB8:
		TWDR = contacom; // Cargar el dato
 1c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWEN)|(1 << TWIE)|(1 << TWINT)|(1 << TWEA); // Inicia el envio
 1c8:	85 ec       	ldi	r24, 0xC5	; 197
 1ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <__vector_24+0x6e>
		default: // Se libera el bus de cualquier error
		TWCR |=(1 << TWINT)|(1 << TWSTO);
 1d0:	ec eb       	ldi	r30, 0xBC	; 188
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 69       	ori	r24, 0x90	; 144
 1d8:	80 83       	st	Z, r24
		break;
	}
}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	8f 91       	pop	r24
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <__vector_4>:

	
	
ISR(PCINT1_vect){
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	2f 93       	push	r18
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	80 e7       	ldi	r24, 0x70	; 112
 1fe:	92 e0       	ldi	r25, 0x02	; 2
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <__vector_4+0x16>
 208:	00 c0       	rjmp	.+0      	; 0x20a <__vector_4+0x20>
 20a:	00 00       	nop
	// Pequeño retardo para evitar rebotes mecánicos
	_delay_ms(DEBOUNCE_TIME);

	// Verificación de estado después del retardo
	if (!(PINC & (1 << PC0)) && (PINC & (1 << PC1))) {	//Se ejecuta si solamente se presiona PC0
 20c:	30 99       	sbic	0x06, 0	; 6
 20e:	0b c0       	rjmp	.+22     	; 0x226 <__vector_4+0x3c>
 210:	31 9b       	sbis	0x06, 1	; 6
 212:	09 c0       	rjmp	.+18     	; 0x226 <__vector_4+0x3c>
		COUNT++;		//Aumenta el contador
 214:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <COUNT>
 218:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <COUNT+0x1>
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <COUNT+0x1>
 222:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <COUNT>
	}

	if (COUNT >= 16) {		//Al llegar a 16, el contador se reinicia a 0
 226:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <COUNT>
 22a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <COUNT+0x1>
 22e:	40 97       	sbiw	r24, 0x10	; 16
 230:	24 f0       	brlt	.+8      	; 0x23a <__vector_4+0x50>
		COUNT = 0;
 232:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <COUNT+0x1>
 236:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <COUNT>
	}

	if (!(PINC & (1 << PC1)) && (PINC & (1 << PC0))) {		//Se ejecuta si solamente se presiona PC1
 23a:	31 99       	sbic	0x06, 1	; 6
 23c:	0b c0       	rjmp	.+22     	; 0x254 <__vector_4+0x6a>
 23e:	30 9b       	sbis	0x06, 0	; 6
 240:	09 c0       	rjmp	.+18     	; 0x254 <__vector_4+0x6a>
		COUNT--;		//Disminuye el contador
 242:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <COUNT>
 246:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <COUNT+0x1>
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <COUNT+0x1>
 250:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <COUNT>
	}

	if (COUNT <= 0) {	//Si detecta que la cuenta llega a 0, el valor del contador se setea en 0, 
 254:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <COUNT>
 258:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <COUNT+0x1>
 25c:	18 16       	cp	r1, r24
 25e:	19 06       	cpc	r1, r25
 260:	24 f0       	brlt	.+8      	; 0x26a <__vector_4+0x80>
		COUNT = 0;		
 262:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <COUNT+0x1>
 266:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <COUNT>
	}

 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	2f 91       	pop	r18
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
